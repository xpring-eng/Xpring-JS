/**
 * PayID
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Mapping from '../model/Mapping';

/**
* Default service.
* @module api/DefaultApi
* @version 0.0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the resolvePayID operation.
     * @callback module:api/DefaultApi~resolvePayIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get-pay-id
     * Resolve a pay id
     * @param {module:api/DefaultApi~resolvePayIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mapping}
     */
    resolvePayID(path, callback) {
      let postBody = null;

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xrpl-mainnet+json', 'application/xrpl-testnet+json'];
      let returnType = Mapping;

      return this.apiClient.callApi(
        '/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
