/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var org_xrpl_rpc_v1_ledger_objects_pb = require('../../../../org/xrpl/rpc/v1/ledger_objects_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_ledger_objects_pb);
var org_xrpl_rpc_v1_common_pb = require('../../../../org/xrpl/rpc/v1/common_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_common_pb);
goog.exportSymbol('proto.org.xrpl.rpc.v1.AffectedNode', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.CreatedNode', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.DeletedNode', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Meta', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.ModifiedNode', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.TransactionResult', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.TransactionResult.ResultType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Meta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.Meta.repeatedFields_, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Meta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Meta.displayName = 'proto.org.xrpl.rpc.v1.Meta';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.Meta.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Meta.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Meta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Meta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Meta.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionIndex: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    transactionResult: (f = msg.getTransactionResult()) && proto.org.xrpl.rpc.v1.TransactionResult.toObject(includeInstance, f),
    affectedNodesList: jspb.Message.toObjectList(msg.getAffectedNodesList(),
    proto.org.xrpl.rpc.v1.AffectedNode.toObject, includeInstance),
    deliveredAmount: (f = msg.getDeliveredAmount()) && org_xrpl_rpc_v1_common_pb.DeliveredAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Meta}
 */
proto.org.xrpl.rpc.v1.Meta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Meta;
  return proto.org.xrpl.rpc.v1.Meta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Meta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Meta}
 */
proto.org.xrpl.rpc.v1.Meta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTransactionIndex(value);
      break;
    case 2:
      var value = new proto.org.xrpl.rpc.v1.TransactionResult;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.TransactionResult.deserializeBinaryFromReader);
      msg.setTransactionResult(value);
      break;
    case 3:
      var value = new proto.org.xrpl.rpc.v1.AffectedNode;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.AffectedNode.deserializeBinaryFromReader);
      msg.addAffectedNodes(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.DeliveredAmount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DeliveredAmount.deserializeBinaryFromReader);
      msg.setDeliveredAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Meta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Meta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Meta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Meta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getTransactionResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.xrpl.rpc.v1.TransactionResult.serializeBinaryToWriter
    );
  }
  f = message.getAffectedNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.org.xrpl.rpc.v1.AffectedNode.serializeBinaryToWriter
    );
  }
  f = message.getDeliveredAmount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.DeliveredAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 transaction_index = 1;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.Meta.prototype.getTransactionIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.Meta.prototype.setTransactionIndex = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional TransactionResult transaction_result = 2;
 * @return {?proto.org.xrpl.rpc.v1.TransactionResult}
 */
proto.org.xrpl.rpc.v1.Meta.prototype.getTransactionResult = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TransactionResult} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.TransactionResult, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.TransactionResult|undefined} value */
proto.org.xrpl.rpc.v1.Meta.prototype.setTransactionResult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Meta.prototype.clearTransactionResult = function() {
  this.setTransactionResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Meta.prototype.hasTransactionResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated AffectedNode affected_nodes = 3;
 * @return {!Array<!proto.org.xrpl.rpc.v1.AffectedNode>}
 */
proto.org.xrpl.rpc.v1.Meta.prototype.getAffectedNodesList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.AffectedNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.xrpl.rpc.v1.AffectedNode, 3));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.AffectedNode>} value */
proto.org.xrpl.rpc.v1.Meta.prototype.setAffectedNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.AffectedNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.AffectedNode}
 */
proto.org.xrpl.rpc.v1.Meta.prototype.addAffectedNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.org.xrpl.rpc.v1.AffectedNode, opt_index);
};


proto.org.xrpl.rpc.v1.Meta.prototype.clearAffectedNodesList = function() {
  this.setAffectedNodesList([]);
};


/**
 * optional DeliveredAmount delivered_amount = 4;
 * @return {?proto.org.xrpl.rpc.v1.DeliveredAmount}
 */
proto.org.xrpl.rpc.v1.Meta.prototype.getDeliveredAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DeliveredAmount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DeliveredAmount, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.DeliveredAmount|undefined} value */
proto.org.xrpl.rpc.v1.Meta.prototype.setDeliveredAmount = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.Meta.prototype.clearDeliveredAmount = function() {
  this.setDeliveredAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Meta.prototype.hasDeliveredAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.TransactionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.TransactionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.TransactionResult.displayName = 'proto.org.xrpl.rpc.v1.TransactionResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.TransactionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.TransactionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.TransactionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.TransactionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.TransactionResult}
 */
proto.org.xrpl.rpc.v1.TransactionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.TransactionResult;
  return proto.org.xrpl.rpc.v1.TransactionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.TransactionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.TransactionResult}
 */
proto.org.xrpl.rpc.v1.TransactionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.org.xrpl.rpc.v1.TransactionResult.ResultType} */ (reader.readEnum());
      msg.setResultType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.TransactionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.TransactionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.TransactionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.TransactionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.TransactionResult.ResultType = {
  RESULT_TYPE_UNSPECIFIED: 0,
  RESULT_TYPE_TEC: 1,
  RESULT_TYPE_TEF: 2,
  RESULT_TYPE_TEL: 3,
  RESULT_TYPE_TEM: 4,
  RESULT_TYPE_TER: 5,
  RESULT_TYPE_TES: 6
};

/**
 * optional ResultType result_type = 1;
 * @return {!proto.org.xrpl.rpc.v1.TransactionResult.ResultType}
 */
proto.org.xrpl.rpc.v1.TransactionResult.prototype.getResultType = function() {
  return /** @type {!proto.org.xrpl.rpc.v1.TransactionResult.ResultType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.org.xrpl.rpc.v1.TransactionResult.ResultType} value */
proto.org.xrpl.rpc.v1.TransactionResult.prototype.setResultType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.TransactionResult.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.TransactionResult.prototype.setResult = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.AffectedNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.xrpl.rpc.v1.AffectedNode.oneofGroups_);
};
goog.inherits(proto.org.xrpl.rpc.v1.AffectedNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.AffectedNode.displayName = 'proto.org.xrpl.rpc.v1.AffectedNode';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.xrpl.rpc.v1.AffectedNode.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.AffectedNode.NodeCase = {
  NODE_NOT_SET: 0,
  CREATED_NODE: 3,
  DELETED_NODE: 4,
  MODIFIED_NODE: 5
};

/**
 * @return {proto.org.xrpl.rpc.v1.AffectedNode.NodeCase}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.getNodeCase = function() {
  return /** @type {proto.org.xrpl.rpc.v1.AffectedNode.NodeCase} */(jspb.Message.computeOneofCase(this, proto.org.xrpl.rpc.v1.AffectedNode.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.AffectedNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.AffectedNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.AffectedNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerEntryType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ledgerIndex: msg.getLedgerIndex_asB64(),
    createdNode: (f = msg.getCreatedNode()) && proto.org.xrpl.rpc.v1.CreatedNode.toObject(includeInstance, f),
    deletedNode: (f = msg.getDeletedNode()) && proto.org.xrpl.rpc.v1.DeletedNode.toObject(includeInstance, f),
    modifiedNode: (f = msg.getModifiedNode()) && proto.org.xrpl.rpc.v1.ModifiedNode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.AffectedNode}
 */
proto.org.xrpl.rpc.v1.AffectedNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.AffectedNode;
  return proto.org.xrpl.rpc.v1.AffectedNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.AffectedNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.AffectedNode}
 */
proto.org.xrpl.rpc.v1.AffectedNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.org.xrpl.rpc.v1.LedgerEntryType} */ (reader.readEnum());
      msg.setLedgerEntryType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLedgerIndex(value);
      break;
    case 3:
      var value = new proto.org.xrpl.rpc.v1.CreatedNode;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.CreatedNode.deserializeBinaryFromReader);
      msg.setCreatedNode(value);
      break;
    case 4:
      var value = new proto.org.xrpl.rpc.v1.DeletedNode;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.DeletedNode.deserializeBinaryFromReader);
      msg.setDeletedNode(value);
      break;
    case 5:
      var value = new proto.org.xrpl.rpc.v1.ModifiedNode;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.ModifiedNode.deserializeBinaryFromReader);
      msg.setModifiedNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.AffectedNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.AffectedNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.AffectedNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerEntryType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLedgerIndex_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCreatedNode();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.org.xrpl.rpc.v1.CreatedNode.serializeBinaryToWriter
    );
  }
  f = message.getDeletedNode();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.org.xrpl.rpc.v1.DeletedNode.serializeBinaryToWriter
    );
  }
  f = message.getModifiedNode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.org.xrpl.rpc.v1.ModifiedNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional LedgerEntryType ledger_entry_type = 1;
 * @return {!proto.org.xrpl.rpc.v1.LedgerEntryType}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.getLedgerEntryType = function() {
  return /** @type {!proto.org.xrpl.rpc.v1.LedgerEntryType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.org.xrpl.rpc.v1.LedgerEntryType} value */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.setLedgerEntryType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes ledger_index = 2;
 * @return {!(string|Uint8Array)}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.getLedgerIndex = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ledger_index = 2;
 * This is a type-conversion wrapper around `getLedgerIndex()`
 * @return {string}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.getLedgerIndex_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLedgerIndex()));
};


/**
 * optional bytes ledger_index = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLedgerIndex()`
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.getLedgerIndex_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLedgerIndex()));
};


/** @param {!(string|Uint8Array)} value */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.setLedgerIndex = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional CreatedNode created_node = 3;
 * @return {?proto.org.xrpl.rpc.v1.CreatedNode}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.getCreatedNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CreatedNode} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.CreatedNode, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.CreatedNode|undefined} value */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.setCreatedNode = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.org.xrpl.rpc.v1.AffectedNode.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.AffectedNode.prototype.clearCreatedNode = function() {
  this.setCreatedNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.hasCreatedNode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeletedNode deleted_node = 4;
 * @return {?proto.org.xrpl.rpc.v1.DeletedNode}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.getDeletedNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DeletedNode} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.DeletedNode, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.DeletedNode|undefined} value */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.setDeletedNode = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.org.xrpl.rpc.v1.AffectedNode.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.AffectedNode.prototype.clearDeletedNode = function() {
  this.setDeletedNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.hasDeletedNode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ModifiedNode modified_node = 5;
 * @return {?proto.org.xrpl.rpc.v1.ModifiedNode}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.getModifiedNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.ModifiedNode} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.ModifiedNode, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.ModifiedNode|undefined} value */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.setModifiedNode = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.org.xrpl.rpc.v1.AffectedNode.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.AffectedNode.prototype.clearModifiedNode = function() {
  this.setModifiedNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AffectedNode.prototype.hasModifiedNode = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.CreatedNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.CreatedNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.CreatedNode.displayName = 'proto.org.xrpl.rpc.v1.CreatedNode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.CreatedNode.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.CreatedNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.CreatedNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.CreatedNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    newFields: (f = msg.getNewFields()) && org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.CreatedNode}
 */
proto.org.xrpl.rpc.v1.CreatedNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.CreatedNode;
  return proto.org.xrpl.rpc.v1.CreatedNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.CreatedNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.CreatedNode}
 */
proto.org.xrpl.rpc.v1.CreatedNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject;
      reader.readMessage(value,org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.deserializeBinaryFromReader);
      msg.setNewFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.CreatedNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.CreatedNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.CreatedNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.CreatedNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewFields();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional LedgerObject new_fields = 1;
 * @return {?proto.org.xrpl.rpc.v1.LedgerObject}
 */
proto.org.xrpl.rpc.v1.CreatedNode.prototype.getNewFields = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LedgerObject} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.LedgerObject|undefined} value */
proto.org.xrpl.rpc.v1.CreatedNode.prototype.setNewFields = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.CreatedNode.prototype.clearNewFields = function() {
  this.setNewFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CreatedNode.prototype.hasNewFields = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.DeletedNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.DeletedNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.DeletedNode.displayName = 'proto.org.xrpl.rpc.v1.DeletedNode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.DeletedNode.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.DeletedNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.DeletedNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.DeletedNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    finalFields: (f = msg.getFinalFields()) && org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.DeletedNode}
 */
proto.org.xrpl.rpc.v1.DeletedNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.DeletedNode;
  return proto.org.xrpl.rpc.v1.DeletedNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.DeletedNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.DeletedNode}
 */
proto.org.xrpl.rpc.v1.DeletedNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject;
      reader.readMessage(value,org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.deserializeBinaryFromReader);
      msg.setFinalFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.DeletedNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.DeletedNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.DeletedNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.DeletedNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFinalFields();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional LedgerObject final_fields = 1;
 * @return {?proto.org.xrpl.rpc.v1.LedgerObject}
 */
proto.org.xrpl.rpc.v1.DeletedNode.prototype.getFinalFields = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LedgerObject} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.LedgerObject|undefined} value */
proto.org.xrpl.rpc.v1.DeletedNode.prototype.setFinalFields = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.DeletedNode.prototype.clearFinalFields = function() {
  this.setFinalFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DeletedNode.prototype.hasFinalFields = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.ModifiedNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.ModifiedNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.ModifiedNode.displayName = 'proto.org.xrpl.rpc.v1.ModifiedNode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.ModifiedNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.ModifiedNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.ModifiedNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    finalFields: (f = msg.getFinalFields()) && org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.toObject(includeInstance, f),
    previousFields: (f = msg.getPreviousFields()) && org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.toObject(includeInstance, f),
    previousTransactionId: (f = msg.getPreviousTransactionId()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionID.toObject(includeInstance, f),
    previousTransactionLedgerSequence: (f = msg.getPreviousTransactionLedgerSequence()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.ModifiedNode}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.ModifiedNode;
  return proto.org.xrpl.rpc.v1.ModifiedNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.ModifiedNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.ModifiedNode}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject;
      reader.readMessage(value,org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.deserializeBinaryFromReader);
      msg.setFinalFields(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject;
      reader.readMessage(value,org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.deserializeBinaryFromReader);
      msg.setPreviousFields(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionID.deserializeBinaryFromReader);
      msg.setPreviousTransactionId(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.deserializeBinaryFromReader);
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.ModifiedNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.ModifiedNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.ModifiedNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFinalFields();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.serializeBinaryToWriter
    );
  }
  f = message.getPreviousFields();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional LedgerObject final_fields = 1;
 * @return {?proto.org.xrpl.rpc.v1.LedgerObject}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.getFinalFields = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LedgerObject} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.LedgerObject|undefined} value */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.setFinalFields = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.ModifiedNode.prototype.clearFinalFields = function() {
  this.setFinalFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.hasFinalFields = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LedgerObject previous_fields = 2;
 * @return {?proto.org.xrpl.rpc.v1.LedgerObject}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.getPreviousFields = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LedgerObject} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_ledger_objects_pb.LedgerObject, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.LedgerObject|undefined} value */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.setPreviousFields = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.ModifiedNode.prototype.clearPreviousFields = function() {
  this.setPreviousFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.hasPreviousFields = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PreviousTransactionID previous_transaction_id = 3;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionID}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.getPreviousTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionID, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.ModifiedNode.prototype.clearPreviousTransactionId = function() {
  this.setPreviousTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.hasPreviousTransactionId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 4;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.ModifiedNode.prototype.clearPreviousTransactionLedgerSequence = function() {
  this.setPreviousTransactionLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.ModifiedNode.prototype.hasPreviousTransactionLedgerSequence = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.org.xrpl.rpc.v1);
