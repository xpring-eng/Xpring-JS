/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var org_xrpl_rpc_v1_common_pb = require('../../../../org/xrpl/rpc/v1/common_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_common_pb);
goog.exportSymbol('proto.org.xrpl.rpc.v1.AccountRoot', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Amendments', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Amendments.Amendment', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Amendments.Majority', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Check', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.DepositPreauthObject', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.DirectoryNode', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Escrow', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.FeeSettings', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.LedgerEntryType', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.LedgerHashes', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.LedgerObject', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Offer', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.PayChannel', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.RippleState', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.SignerList', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.LedgerObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_);
};
goog.inherits(proto.org.xrpl.rpc.v1.LedgerObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.LedgerObject.displayName = 'proto.org.xrpl.rpc.v1.LedgerObject';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.LedgerObject.ObjectCase = {
  OBJECT_NOT_SET: 0,
  ACCOUNT_ROOT: 1,
  AMENDMENTS: 2,
  CHECK: 3,
  DEPOSIT_PREAUTH: 4,
  DIRECTORY_NODE: 5,
  ESCROW: 6,
  FEE_SETTINGS: 7,
  LEDGER_HASHES: 8,
  OFFER: 9,
  PAY_CHANNEL: 10,
  RIPPLE_STATE: 11,
  SIGNER_LIST: 12
};

/**
 * @return {proto.org.xrpl.rpc.v1.LedgerObject.ObjectCase}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getObjectCase = function() {
  return /** @type {proto.org.xrpl.rpc.v1.LedgerObject.ObjectCase} */(jspb.Message.computeOneofCase(this, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.LedgerObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.LedgerObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.LedgerObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountRoot: (f = msg.getAccountRoot()) && proto.org.xrpl.rpc.v1.AccountRoot.toObject(includeInstance, f),
    amendments: (f = msg.getAmendments()) && proto.org.xrpl.rpc.v1.Amendments.toObject(includeInstance, f),
    check: (f = msg.getCheck()) && proto.org.xrpl.rpc.v1.Check.toObject(includeInstance, f),
    depositPreauth: (f = msg.getDepositPreauth()) && proto.org.xrpl.rpc.v1.DepositPreauthObject.toObject(includeInstance, f),
    directoryNode: (f = msg.getDirectoryNode()) && proto.org.xrpl.rpc.v1.DirectoryNode.toObject(includeInstance, f),
    escrow: (f = msg.getEscrow()) && proto.org.xrpl.rpc.v1.Escrow.toObject(includeInstance, f),
    feeSettings: (f = msg.getFeeSettings()) && proto.org.xrpl.rpc.v1.FeeSettings.toObject(includeInstance, f),
    ledgerHashes: (f = msg.getLedgerHashes()) && proto.org.xrpl.rpc.v1.LedgerHashes.toObject(includeInstance, f),
    offer: (f = msg.getOffer()) && proto.org.xrpl.rpc.v1.Offer.toObject(includeInstance, f),
    payChannel: (f = msg.getPayChannel()) && proto.org.xrpl.rpc.v1.PayChannel.toObject(includeInstance, f),
    rippleState: (f = msg.getRippleState()) && proto.org.xrpl.rpc.v1.RippleState.toObject(includeInstance, f),
    signerList: (f = msg.getSignerList()) && proto.org.xrpl.rpc.v1.SignerList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.LedgerObject}
 */
proto.org.xrpl.rpc.v1.LedgerObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.LedgerObject;
  return proto.org.xrpl.rpc.v1.LedgerObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.LedgerObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.LedgerObject}
 */
proto.org.xrpl.rpc.v1.LedgerObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.xrpl.rpc.v1.AccountRoot;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.AccountRoot.deserializeBinaryFromReader);
      msg.setAccountRoot(value);
      break;
    case 2:
      var value = new proto.org.xrpl.rpc.v1.Amendments;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Amendments.deserializeBinaryFromReader);
      msg.setAmendments(value);
      break;
    case 3:
      var value = new proto.org.xrpl.rpc.v1.Check;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Check.deserializeBinaryFromReader);
      msg.setCheck(value);
      break;
    case 4:
      var value = new proto.org.xrpl.rpc.v1.DepositPreauthObject;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.DepositPreauthObject.deserializeBinaryFromReader);
      msg.setDepositPreauth(value);
      break;
    case 5:
      var value = new proto.org.xrpl.rpc.v1.DirectoryNode;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.DirectoryNode.deserializeBinaryFromReader);
      msg.setDirectoryNode(value);
      break;
    case 6:
      var value = new proto.org.xrpl.rpc.v1.Escrow;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Escrow.deserializeBinaryFromReader);
      msg.setEscrow(value);
      break;
    case 7:
      var value = new proto.org.xrpl.rpc.v1.FeeSettings;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.FeeSettings.deserializeBinaryFromReader);
      msg.setFeeSettings(value);
      break;
    case 8:
      var value = new proto.org.xrpl.rpc.v1.LedgerHashes;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.LedgerHashes.deserializeBinaryFromReader);
      msg.setLedgerHashes(value);
      break;
    case 9:
      var value = new proto.org.xrpl.rpc.v1.Offer;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Offer.deserializeBinaryFromReader);
      msg.setOffer(value);
      break;
    case 10:
      var value = new proto.org.xrpl.rpc.v1.PayChannel;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.PayChannel.deserializeBinaryFromReader);
      msg.setPayChannel(value);
      break;
    case 11:
      var value = new proto.org.xrpl.rpc.v1.RippleState;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.RippleState.deserializeBinaryFromReader);
      msg.setRippleState(value);
      break;
    case 12:
      var value = new proto.org.xrpl.rpc.v1.SignerList;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.SignerList.deserializeBinaryFromReader);
      msg.setSignerList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.LedgerObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.LedgerObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.LedgerObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountRoot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.org.xrpl.rpc.v1.AccountRoot.serializeBinaryToWriter
    );
  }
  f = message.getAmendments();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.xrpl.rpc.v1.Amendments.serializeBinaryToWriter
    );
  }
  f = message.getCheck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.org.xrpl.rpc.v1.Check.serializeBinaryToWriter
    );
  }
  f = message.getDepositPreauth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.org.xrpl.rpc.v1.DepositPreauthObject.serializeBinaryToWriter
    );
  }
  f = message.getDirectoryNode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.org.xrpl.rpc.v1.DirectoryNode.serializeBinaryToWriter
    );
  }
  f = message.getEscrow();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.org.xrpl.rpc.v1.Escrow.serializeBinaryToWriter
    );
  }
  f = message.getFeeSettings();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.org.xrpl.rpc.v1.FeeSettings.serializeBinaryToWriter
    );
  }
  f = message.getLedgerHashes();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.org.xrpl.rpc.v1.LedgerHashes.serializeBinaryToWriter
    );
  }
  f = message.getOffer();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.org.xrpl.rpc.v1.Offer.serializeBinaryToWriter
    );
  }
  f = message.getPayChannel();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.org.xrpl.rpc.v1.PayChannel.serializeBinaryToWriter
    );
  }
  f = message.getRippleState();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.org.xrpl.rpc.v1.RippleState.serializeBinaryToWriter
    );
  }
  f = message.getSignerList();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.org.xrpl.rpc.v1.SignerList.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountRoot account_root = 1;
 * @return {?proto.org.xrpl.rpc.v1.AccountRoot}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getAccountRoot = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.AccountRoot} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.AccountRoot, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.AccountRoot|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setAccountRoot = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearAccountRoot = function() {
  this.setAccountRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasAccountRoot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Amendments amendments = 2;
 * @return {?proto.org.xrpl.rpc.v1.Amendments}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getAmendments = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amendments} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.Amendments, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Amendments|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setAmendments = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearAmendments = function() {
  this.setAmendments(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasAmendments = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Check check = 3;
 * @return {?proto.org.xrpl.rpc.v1.Check}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getCheck = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Check} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.Check, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Check|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setCheck = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearCheck = function() {
  this.setCheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasCheck = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DepositPreauthObject deposit_preauth = 4;
 * @return {?proto.org.xrpl.rpc.v1.DepositPreauthObject}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getDepositPreauth = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DepositPreauthObject} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.DepositPreauthObject, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.DepositPreauthObject|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setDepositPreauth = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearDepositPreauth = function() {
  this.setDepositPreauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasDepositPreauth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DirectoryNode directory_node = 5;
 * @return {?proto.org.xrpl.rpc.v1.DirectoryNode}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getDirectoryNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DirectoryNode} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.DirectoryNode, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.DirectoryNode|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setDirectoryNode = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearDirectoryNode = function() {
  this.setDirectoryNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasDirectoryNode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Escrow escrow = 6;
 * @return {?proto.org.xrpl.rpc.v1.Escrow}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getEscrow = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Escrow} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.Escrow, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.Escrow|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setEscrow = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearEscrow = function() {
  this.setEscrow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasEscrow = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional FeeSettings fee_settings = 7;
 * @return {?proto.org.xrpl.rpc.v1.FeeSettings}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getFeeSettings = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.FeeSettings} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.FeeSettings, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.FeeSettings|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setFeeSettings = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearFeeSettings = function() {
  this.setFeeSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasFeeSettings = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional LedgerHashes ledger_hashes = 8;
 * @return {?proto.org.xrpl.rpc.v1.LedgerHashes}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getLedgerHashes = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LedgerHashes} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.LedgerHashes, 8));
};


/** @param {?proto.org.xrpl.rpc.v1.LedgerHashes|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setLedgerHashes = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearLedgerHashes = function() {
  this.setLedgerHashes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasLedgerHashes = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Offer offer = 9;
 * @return {?proto.org.xrpl.rpc.v1.Offer}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getOffer = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Offer} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.Offer, 9));
};


/** @param {?proto.org.xrpl.rpc.v1.Offer|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setOffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearOffer = function() {
  this.setOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasOffer = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PayChannel pay_channel = 10;
 * @return {?proto.org.xrpl.rpc.v1.PayChannel}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getPayChannel = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PayChannel} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.PayChannel, 10));
};


/** @param {?proto.org.xrpl.rpc.v1.PayChannel|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setPayChannel = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearPayChannel = function() {
  this.setPayChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasPayChannel = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RippleState ripple_state = 11;
 * @return {?proto.org.xrpl.rpc.v1.RippleState}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getRippleState = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.RippleState} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.RippleState, 11));
};


/** @param {?proto.org.xrpl.rpc.v1.RippleState|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setRippleState = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearRippleState = function() {
  this.setRippleState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasRippleState = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SignerList signer_list = 12;
 * @return {?proto.org.xrpl.rpc.v1.SignerList}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.getSignerList = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SignerList} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.SignerList, 12));
};


/** @param {?proto.org.xrpl.rpc.v1.SignerList|undefined} value */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.setSignerList = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.org.xrpl.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerObject.prototype.clearSignerList = function() {
  this.setSignerList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerObject.prototype.hasSignerList = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.AccountRoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.AccountRoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.AccountRoot.displayName = 'proto.org.xrpl.rpc.v1.AccountRoot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.AccountRoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.AccountRoot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.AccountRoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_common_pb.Account.toObject(includeInstance, f),
    balance: (f = msg.getBalance()) && org_xrpl_rpc_v1_common_pb.Balance.toObject(includeInstance, f),
    sequence: (f = msg.getSequence()) && org_xrpl_rpc_v1_common_pb.Sequence.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    ownerCount: (f = msg.getOwnerCount()) && org_xrpl_rpc_v1_common_pb.OwnerCount.toObject(includeInstance, f),
    previousTransactionId: (f = msg.getPreviousTransactionId()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionID.toObject(includeInstance, f),
    previousTransactionLedgerSequence: (f = msg.getPreviousTransactionLedgerSequence()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.toObject(includeInstance, f),
    accountTransactionId: (f = msg.getAccountTransactionId()) && org_xrpl_rpc_v1_common_pb.AccountTransactionID.toObject(includeInstance, f),
    domain: (f = msg.getDomain()) && org_xrpl_rpc_v1_common_pb.Domain.toObject(includeInstance, f),
    emailHash: (f = msg.getEmailHash()) && org_xrpl_rpc_v1_common_pb.EmailHash.toObject(includeInstance, f),
    messageKey: (f = msg.getMessageKey()) && org_xrpl_rpc_v1_common_pb.MessageKey.toObject(includeInstance, f),
    regularKey: (f = msg.getRegularKey()) && org_xrpl_rpc_v1_common_pb.RegularKey.toObject(includeInstance, f),
    tickSize: (f = msg.getTickSize()) && org_xrpl_rpc_v1_common_pb.TickSize.toObject(includeInstance, f),
    transferRate: (f = msg.getTransferRate()) && org_xrpl_rpc_v1_common_pb.TransferRate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.AccountRoot}
 */
proto.org.xrpl.rpc.v1.AccountRoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.AccountRoot;
  return proto.org.xrpl.rpc.v1.AccountRoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.AccountRoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.AccountRoot}
 */
proto.org.xrpl.rpc.v1.AccountRoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Account;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Balance;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Balance.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Sequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Sequence.deserializeBinaryFromReader);
      msg.setSequence(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.OwnerCount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OwnerCount.deserializeBinaryFromReader);
      msg.setOwnerCount(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionID.deserializeBinaryFromReader);
      msg.setPreviousTransactionId(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.deserializeBinaryFromReader);
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    case 8:
      var value = new org_xrpl_rpc_v1_common_pb.AccountTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.AccountTransactionID.deserializeBinaryFromReader);
      msg.setAccountTransactionId(value);
      break;
    case 9:
      var value = new org_xrpl_rpc_v1_common_pb.Domain;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Domain.deserializeBinaryFromReader);
      msg.setDomain(value);
      break;
    case 10:
      var value = new org_xrpl_rpc_v1_common_pb.EmailHash;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.EmailHash.deserializeBinaryFromReader);
      msg.setEmailHash(value);
      break;
    case 11:
      var value = new org_xrpl_rpc_v1_common_pb.MessageKey;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.MessageKey.deserializeBinaryFromReader);
      msg.setMessageKey(value);
      break;
    case 12:
      var value = new org_xrpl_rpc_v1_common_pb.RegularKey;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.RegularKey.deserializeBinaryFromReader);
      msg.setRegularKey(value);
      break;
    case 13:
      var value = new org_xrpl_rpc_v1_common_pb.TickSize;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TickSize.deserializeBinaryFromReader);
      msg.setTickSize(value);
      break;
    case 14:
      var value = new org_xrpl_rpc_v1_common_pb.TransferRate;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TransferRate.deserializeBinaryFromReader);
      msg.setTransferRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.AccountRoot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.AccountRoot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.AccountRoot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Balance.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Sequence.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getOwnerCount();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.OwnerCount.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.serializeBinaryToWriter
    );
  }
  f = message.getAccountTransactionId();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      org_xrpl_rpc_v1_common_pb.AccountTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getDomain();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      org_xrpl_rpc_v1_common_pb.Domain.serializeBinaryToWriter
    );
  }
  f = message.getEmailHash();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      org_xrpl_rpc_v1_common_pb.EmailHash.serializeBinaryToWriter
    );
  }
  f = message.getMessageKey();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      org_xrpl_rpc_v1_common_pb.MessageKey.serializeBinaryToWriter
    );
  }
  f = message.getRegularKey();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      org_xrpl_rpc_v1_common_pb.RegularKey.serializeBinaryToWriter
    );
  }
  f = message.getTickSize();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      org_xrpl_rpc_v1_common_pb.TickSize.serializeBinaryToWriter
    );
  }
  f = message.getTransferRate();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      org_xrpl_rpc_v1_common_pb.TransferRate.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.org.xrpl.rpc.v1.Account}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Account} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Account, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Account|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Balance balance = 2;
 * @return {?proto.org.xrpl.rpc.v1.Balance}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getBalance = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Balance} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Balance, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Balance|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setBalance = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearBalance = function() {
  this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Sequence sequence = 3;
 * @return {?proto.org.xrpl.rpc.v1.Sequence}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Sequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Sequence, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Sequence|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setSequence = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearSequence = function() {
  this.setSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Flags flags = 4;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OwnerCount owner_count = 5;
 * @return {?proto.org.xrpl.rpc.v1.OwnerCount}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getOwnerCount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OwnerCount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OwnerCount, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.OwnerCount|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setOwnerCount = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearOwnerCount = function() {
  this.setOwnerCount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasOwnerCount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PreviousTransactionID previous_transaction_id = 6;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionID}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getPreviousTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionID, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearPreviousTransactionId = function() {
  this.setPreviousTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasPreviousTransactionId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 7;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearPreviousTransactionLedgerSequence = function() {
  this.setPreviousTransactionLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasPreviousTransactionLedgerSequence = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AccountTransactionID account_transaction_id = 8;
 * @return {?proto.org.xrpl.rpc.v1.AccountTransactionID}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getAccountTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.AccountTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.AccountTransactionID, 8));
};


/** @param {?proto.org.xrpl.rpc.v1.AccountTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setAccountTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearAccountTransactionId = function() {
  this.setAccountTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasAccountTransactionId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Domain domain = 9;
 * @return {?proto.org.xrpl.rpc.v1.Domain}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getDomain = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Domain} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Domain, 9));
};


/** @param {?proto.org.xrpl.rpc.v1.Domain|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setDomain = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearDomain = function() {
  this.setDomain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasDomain = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional EmailHash email_hash = 10;
 * @return {?proto.org.xrpl.rpc.v1.EmailHash}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getEmailHash = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.EmailHash} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.EmailHash, 10));
};


/** @param {?proto.org.xrpl.rpc.v1.EmailHash|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setEmailHash = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearEmailHash = function() {
  this.setEmailHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasEmailHash = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MessageKey message_key = 11;
 * @return {?proto.org.xrpl.rpc.v1.MessageKey}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getMessageKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.MessageKey} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.MessageKey, 11));
};


/** @param {?proto.org.xrpl.rpc.v1.MessageKey|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setMessageKey = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearMessageKey = function() {
  this.setMessageKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasMessageKey = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RegularKey regular_key = 12;
 * @return {?proto.org.xrpl.rpc.v1.RegularKey}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getRegularKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.RegularKey} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.RegularKey, 12));
};


/** @param {?proto.org.xrpl.rpc.v1.RegularKey|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setRegularKey = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearRegularKey = function() {
  this.setRegularKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasRegularKey = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional TickSize tick_size = 13;
 * @return {?proto.org.xrpl.rpc.v1.TickSize}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getTickSize = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TickSize} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TickSize, 13));
};


/** @param {?proto.org.xrpl.rpc.v1.TickSize|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setTickSize = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearTickSize = function() {
  this.setTickSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasTickSize = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional TransferRate transfer_rate = 14;
 * @return {?proto.org.xrpl.rpc.v1.TransferRate}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.getTransferRate = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TransferRate} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TransferRate, 14));
};


/** @param {?proto.org.xrpl.rpc.v1.TransferRate|undefined} value */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.setTransferRate = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.org.xrpl.rpc.v1.AccountRoot.prototype.clearTransferRate = function() {
  this.setTransferRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountRoot.prototype.hasTransferRate = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Amendments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.Amendments.repeatedFields_, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Amendments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Amendments.displayName = 'proto.org.xrpl.rpc.v1.Amendments';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.Amendments.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Amendments.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Amendments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Amendments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Amendments.toObject = function(includeInstance, msg) {
  var f, obj = {
    amendmentsList: jspb.Message.toObjectList(msg.getAmendmentsList(),
    proto.org.xrpl.rpc.v1.Amendments.Amendment.toObject, includeInstance),
    majoritiesList: jspb.Message.toObjectList(msg.getMajoritiesList(),
    proto.org.xrpl.rpc.v1.Amendments.Majority.toObject, includeInstance),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Amendments}
 */
proto.org.xrpl.rpc.v1.Amendments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Amendments;
  return proto.org.xrpl.rpc.v1.Amendments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Amendments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Amendments}
 */
proto.org.xrpl.rpc.v1.Amendments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.xrpl.rpc.v1.Amendments.Amendment;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Amendments.Amendment.deserializeBinaryFromReader);
      msg.addAmendments(value);
      break;
    case 2:
      var value = new proto.org.xrpl.rpc.v1.Amendments.Majority;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Amendments.Majority.deserializeBinaryFromReader);
      msg.addMajorities(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Amendments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Amendments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Amendments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Amendments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.xrpl.rpc.v1.Amendments.Amendment.serializeBinaryToWriter
    );
  }
  f = message.getMajoritiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.org.xrpl.rpc.v1.Amendments.Majority.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Amendments.Amendment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Amendments.Amendment.displayName = 'proto.org.xrpl.rpc.v1.Amendments.Amendment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Amendments.Amendment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Amendments.Amendment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Amendments.Amendment}
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Amendments.Amendment;
  return proto.org.xrpl.rpc.v1.Amendments.Amendment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Amendments.Amendment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Amendments.Amendment}
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Amendments.Amendment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Amendments.Amendment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Amendments.Amendment.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.org.xrpl.rpc.v1.Amendments.Amendment.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Amendments.Majority = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Amendments.Majority, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Amendments.Majority.displayName = 'proto.org.xrpl.rpc.v1.Amendments.Majority';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Amendments.Majority.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Amendments.Majority} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.toObject = function(includeInstance, msg) {
  var f, obj = {
    amendment: (f = msg.getAmendment()) && proto.org.xrpl.rpc.v1.Amendments.Amendment.toObject(includeInstance, f),
    closeTime: (f = msg.getCloseTime()) && org_xrpl_rpc_v1_common_pb.CloseTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Amendments.Majority}
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Amendments.Majority;
  return proto.org.xrpl.rpc.v1.Amendments.Majority.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Amendments.Majority} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Amendments.Majority}
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.xrpl.rpc.v1.Amendments.Amendment;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Amendments.Amendment.deserializeBinaryFromReader);
      msg.setAmendment(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.CloseTime;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.CloseTime.deserializeBinaryFromReader);
      msg.setCloseTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Amendments.Majority.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Amendments.Majority} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmendment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.org.xrpl.rpc.v1.Amendments.Amendment.serializeBinaryToWriter
    );
  }
  f = message.getCloseTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.CloseTime.serializeBinaryToWriter
    );
  }
};


/**
 * optional Amendment amendment = 1;
 * @return {?proto.org.xrpl.rpc.v1.Amendments.Amendment}
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.getAmendment = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amendments.Amendment} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.Amendments.Amendment, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Amendments.Amendment|undefined} value */
proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.setAmendment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.clearAmendment = function() {
  this.setAmendment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.hasAmendment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CloseTime close_time = 2;
 * @return {?proto.org.xrpl.rpc.v1.CloseTime}
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.getCloseTime = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CloseTime} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.CloseTime, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.CloseTime|undefined} value */
proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.setCloseTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.clearCloseTime = function() {
  this.setCloseTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Amendments.Majority.prototype.hasCloseTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Amendment amendments = 1;
 * @return {!Array<!proto.org.xrpl.rpc.v1.Amendments.Amendment>}
 */
proto.org.xrpl.rpc.v1.Amendments.prototype.getAmendmentsList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.Amendments.Amendment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.xrpl.rpc.v1.Amendments.Amendment, 1));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.Amendments.Amendment>} value */
proto.org.xrpl.rpc.v1.Amendments.prototype.setAmendmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.Amendments.Amendment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.Amendments.Amendment}
 */
proto.org.xrpl.rpc.v1.Amendments.prototype.addAmendments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.xrpl.rpc.v1.Amendments.Amendment, opt_index);
};


proto.org.xrpl.rpc.v1.Amendments.prototype.clearAmendmentsList = function() {
  this.setAmendmentsList([]);
};


/**
 * repeated Majority majorities = 2;
 * @return {!Array<!proto.org.xrpl.rpc.v1.Amendments.Majority>}
 */
proto.org.xrpl.rpc.v1.Amendments.prototype.getMajoritiesList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.Amendments.Majority>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.xrpl.rpc.v1.Amendments.Majority, 2));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.Amendments.Majority>} value */
proto.org.xrpl.rpc.v1.Amendments.prototype.setMajoritiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.Amendments.Majority=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.Amendments.Majority}
 */
proto.org.xrpl.rpc.v1.Amendments.prototype.addMajorities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.org.xrpl.rpc.v1.Amendments.Majority, opt_index);
};


proto.org.xrpl.rpc.v1.Amendments.prototype.clearMajoritiesList = function() {
  this.setMajoritiesList([]);
};


/**
 * optional Flags flags = 3;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.Amendments.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.Amendments.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Amendments.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Amendments.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Check = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Check, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Check.displayName = 'proto.org.xrpl.rpc.v1.Check';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Check.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Check.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Check} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Check.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_common_pb.Account.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && org_xrpl_rpc_v1_common_pb.Destination.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    ownerNode: (f = msg.getOwnerNode()) && org_xrpl_rpc_v1_common_pb.OwnerNode.toObject(includeInstance, f),
    previousTransactionId: (f = msg.getPreviousTransactionId()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionID.toObject(includeInstance, f),
    previousTransactionLedgerSequence: (f = msg.getPreviousTransactionLedgerSequence()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.toObject(includeInstance, f),
    sendMax: (f = msg.getSendMax()) && org_xrpl_rpc_v1_common_pb.SendMax.toObject(includeInstance, f),
    sequence: (f = msg.getSequence()) && org_xrpl_rpc_v1_common_pb.Sequence.toObject(includeInstance, f),
    destinationNode: (f = msg.getDestinationNode()) && org_xrpl_rpc_v1_common_pb.DestinationNode.toObject(includeInstance, f),
    destinationTag: (f = msg.getDestinationTag()) && org_xrpl_rpc_v1_common_pb.DestinationTag.toObject(includeInstance, f),
    expiration: (f = msg.getExpiration()) && org_xrpl_rpc_v1_common_pb.Expiration.toObject(includeInstance, f),
    invoiceId: (f = msg.getInvoiceId()) && org_xrpl_rpc_v1_common_pb.InvoiceID.toObject(includeInstance, f),
    sourceTag: (f = msg.getSourceTag()) && org_xrpl_rpc_v1_common_pb.SourceTag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Check}
 */
proto.org.xrpl.rpc.v1.Check.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Check;
  return proto.org.xrpl.rpc.v1.Check.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Check} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Check}
 */
proto.org.xrpl.rpc.v1.Check.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Account;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Destination;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.OwnerNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OwnerNode.deserializeBinaryFromReader);
      msg.setOwnerNode(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionID.deserializeBinaryFromReader);
      msg.setPreviousTransactionId(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.deserializeBinaryFromReader);
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.SendMax;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SendMax.deserializeBinaryFromReader);
      msg.setSendMax(value);
      break;
    case 8:
      var value = new org_xrpl_rpc_v1_common_pb.Sequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Sequence.deserializeBinaryFromReader);
      msg.setSequence(value);
      break;
    case 9:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationNode.deserializeBinaryFromReader);
      msg.setDestinationNode(value);
      break;
    case 10:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationTag.deserializeBinaryFromReader);
      msg.setDestinationTag(value);
      break;
    case 11:
      var value = new org_xrpl_rpc_v1_common_pb.Expiration;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Expiration.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 12:
      var value = new org_xrpl_rpc_v1_common_pb.InvoiceID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.InvoiceID.deserializeBinaryFromReader);
      msg.setInvoiceId(value);
      break;
    case 13:
      var value = new org_xrpl_rpc_v1_common_pb.SourceTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SourceTag.deserializeBinaryFromReader);
      msg.setSourceTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Check.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Check.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Check} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Check.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Destination.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getOwnerNode();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.OwnerNode.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.serializeBinaryToWriter
    );
  }
  f = message.getSendMax();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.SendMax.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      org_xrpl_rpc_v1_common_pb.Sequence.serializeBinaryToWriter
    );
  }
  f = message.getDestinationNode();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationNode.serializeBinaryToWriter
    );
  }
  f = message.getDestinationTag();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationTag.serializeBinaryToWriter
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      org_xrpl_rpc_v1_common_pb.Expiration.serializeBinaryToWriter
    );
  }
  f = message.getInvoiceId();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      org_xrpl_rpc_v1_common_pb.InvoiceID.serializeBinaryToWriter
    );
  }
  f = message.getSourceTag();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      org_xrpl_rpc_v1_common_pb.SourceTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.org.xrpl.rpc.v1.Account}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Account} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Account, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Account|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Destination destination = 2;
 * @return {?proto.org.xrpl.rpc.v1.Destination}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getDestination = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Destination} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Destination, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Destination|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Flags flags = 3;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OwnerNode owner_node = 4;
 * @return {?proto.org.xrpl.rpc.v1.OwnerNode}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getOwnerNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OwnerNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OwnerNode, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.OwnerNode|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setOwnerNode = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearOwnerNode = function() {
  this.setOwnerNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasOwnerNode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PreviousTransactionID previous_transaction_id = 5;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionID}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getPreviousTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionID, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearPreviousTransactionId = function() {
  this.setPreviousTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasPreviousTransactionId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearPreviousTransactionLedgerSequence = function() {
  this.setPreviousTransactionLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasPreviousTransactionLedgerSequence = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SendMax send_max = 7;
 * @return {?proto.org.xrpl.rpc.v1.SendMax}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getSendMax = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SendMax} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SendMax, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.SendMax|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setSendMax = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearSendMax = function() {
  this.setSendMax(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasSendMax = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Sequence sequence = 8;
 * @return {?proto.org.xrpl.rpc.v1.Sequence}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Sequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Sequence, 8));
};


/** @param {?proto.org.xrpl.rpc.v1.Sequence|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setSequence = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearSequence = function() {
  this.setSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DestinationNode destination_node = 9;
 * @return {?proto.org.xrpl.rpc.v1.DestinationNode}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getDestinationNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationNode, 9));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationNode|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setDestinationNode = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearDestinationNode = function() {
  this.setDestinationNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasDestinationNode = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional DestinationTag destination_tag = 10;
 * @return {?proto.org.xrpl.rpc.v1.DestinationTag}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getDestinationTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationTag, 10));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationTag|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setDestinationTag = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearDestinationTag = function() {
  this.setDestinationTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasDestinationTag = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Expiration expiration = 11;
 * @return {?proto.org.xrpl.rpc.v1.Expiration}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getExpiration = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Expiration} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Expiration, 11));
};


/** @param {?proto.org.xrpl.rpc.v1.Expiration|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional InvoiceID invoice_id = 12;
 * @return {?proto.org.xrpl.rpc.v1.InvoiceID}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getInvoiceId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.InvoiceID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.InvoiceID, 12));
};


/** @param {?proto.org.xrpl.rpc.v1.InvoiceID|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setInvoiceId = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearInvoiceId = function() {
  this.setInvoiceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasInvoiceId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SourceTag source_tag = 13;
 * @return {?proto.org.xrpl.rpc.v1.SourceTag}
 */
proto.org.xrpl.rpc.v1.Check.prototype.getSourceTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SourceTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SourceTag, 13));
};


/** @param {?proto.org.xrpl.rpc.v1.SourceTag|undefined} value */
proto.org.xrpl.rpc.v1.Check.prototype.setSourceTag = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.org.xrpl.rpc.v1.Check.prototype.clearSourceTag = function() {
  this.setSourceTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Check.prototype.hasSourceTag = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.DepositPreauthObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.DepositPreauthObject.displayName = 'proto.org.xrpl.rpc.v1.DepositPreauthObject';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.DepositPreauthObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.DepositPreauthObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_common_pb.Account.toObject(includeInstance, f),
    authorize: (f = msg.getAuthorize()) && org_xrpl_rpc_v1_common_pb.Authorize.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    ownerNode: (f = msg.getOwnerNode()) && org_xrpl_rpc_v1_common_pb.OwnerNode.toObject(includeInstance, f),
    previousTransactionId: (f = msg.getPreviousTransactionId()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionID.toObject(includeInstance, f),
    previousTransactionLedgerSequence: (f = msg.getPreviousTransactionLedgerSequence()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.DepositPreauthObject}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.DepositPreauthObject;
  return proto.org.xrpl.rpc.v1.DepositPreauthObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.DepositPreauthObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.DepositPreauthObject}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Account;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Authorize;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Authorize.deserializeBinaryFromReader);
      msg.setAuthorize(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.OwnerNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OwnerNode.deserializeBinaryFromReader);
      msg.setOwnerNode(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionID.deserializeBinaryFromReader);
      msg.setPreviousTransactionId(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.deserializeBinaryFromReader);
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.DepositPreauthObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.DepositPreauthObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getAuthorize();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Authorize.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getOwnerNode();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.OwnerNode.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.org.xrpl.rpc.v1.Account}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Account} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Account, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Account|undefined} value */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Authorize authorize = 2;
 * @return {?proto.org.xrpl.rpc.v1.Authorize}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.getAuthorize = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Authorize} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Authorize, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Authorize|undefined} value */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.setAuthorize = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.clearAuthorize = function() {
  this.setAuthorize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.hasAuthorize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Flags flags = 3;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OwnerNode owner_node = 4;
 * @return {?proto.org.xrpl.rpc.v1.OwnerNode}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.getOwnerNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OwnerNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OwnerNode, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.OwnerNode|undefined} value */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.setOwnerNode = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.clearOwnerNode = function() {
  this.setOwnerNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.hasOwnerNode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PreviousTransactionID previous_transaction_id = 5;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionID}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.getPreviousTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionID, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.clearPreviousTransactionId = function() {
  this.setPreviousTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.hasPreviousTransactionId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.clearPreviousTransactionLedgerSequence = function() {
  this.setPreviousTransactionLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DepositPreauthObject.prototype.hasPreviousTransactionLedgerSequence = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.DirectoryNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.DirectoryNode.repeatedFields_, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.DirectoryNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.DirectoryNode.displayName = 'proto.org.xrpl.rpc.v1.DirectoryNode';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.DirectoryNode.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.DirectoryNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.DirectoryNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.DirectoryNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    rootIndex: (f = msg.getRootIndex()) && org_xrpl_rpc_v1_common_pb.RootIndex.toObject(includeInstance, f),
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    org_xrpl_rpc_v1_common_pb.Index.toObject, includeInstance),
    indexNext: (f = msg.getIndexNext()) && org_xrpl_rpc_v1_common_pb.IndexNext.toObject(includeInstance, f),
    indexPrevious: (f = msg.getIndexPrevious()) && org_xrpl_rpc_v1_common_pb.IndexPrevious.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && org_xrpl_rpc_v1_common_pb.Owner.toObject(includeInstance, f),
    takerPaysCurrency: (f = msg.getTakerPaysCurrency()) && org_xrpl_rpc_v1_common_pb.TakerPaysCurrency.toObject(includeInstance, f),
    takerPaysIssuer: (f = msg.getTakerPaysIssuer()) && org_xrpl_rpc_v1_common_pb.TakerPaysIssuer.toObject(includeInstance, f),
    takerGetsCurrency: (f = msg.getTakerGetsCurrency()) && org_xrpl_rpc_v1_common_pb.TakerGetsCurreny.toObject(includeInstance, f),
    takerGetsIssuer: (f = msg.getTakerGetsIssuer()) && org_xrpl_rpc_v1_common_pb.TakerGetsIssuer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.DirectoryNode}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.DirectoryNode;
  return proto.org.xrpl.rpc.v1.DirectoryNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.DirectoryNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.DirectoryNode}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.RootIndex;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.RootIndex.deserializeBinaryFromReader);
      msg.setRootIndex(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Index;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Index.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.IndexNext;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.IndexNext.deserializeBinaryFromReader);
      msg.setIndexNext(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.IndexPrevious;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.IndexPrevious.deserializeBinaryFromReader);
      msg.setIndexPrevious(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.Owner;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Owner.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.TakerPaysCurrency;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TakerPaysCurrency.deserializeBinaryFromReader);
      msg.setTakerPaysCurrency(value);
      break;
    case 8:
      var value = new org_xrpl_rpc_v1_common_pb.TakerPaysIssuer;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TakerPaysIssuer.deserializeBinaryFromReader);
      msg.setTakerPaysIssuer(value);
      break;
    case 9:
      var value = new org_xrpl_rpc_v1_common_pb.TakerGetsCurreny;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TakerGetsCurreny.deserializeBinaryFromReader);
      msg.setTakerGetsCurrency(value);
      break;
    case 10:
      var value = new org_xrpl_rpc_v1_common_pb.TakerGetsIssuer;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TakerGetsIssuer.deserializeBinaryFromReader);
      msg.setTakerGetsIssuer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.DirectoryNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.DirectoryNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.DirectoryNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getRootIndex();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.RootIndex.serializeBinaryToWriter
    );
  }
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Index.serializeBinaryToWriter
    );
  }
  f = message.getIndexNext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.IndexNext.serializeBinaryToWriter
    );
  }
  f = message.getIndexPrevious();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.IndexPrevious.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.Owner.serializeBinaryToWriter
    );
  }
  f = message.getTakerPaysCurrency();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.TakerPaysCurrency.serializeBinaryToWriter
    );
  }
  f = message.getTakerPaysIssuer();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      org_xrpl_rpc_v1_common_pb.TakerPaysIssuer.serializeBinaryToWriter
    );
  }
  f = message.getTakerGetsCurrency();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      org_xrpl_rpc_v1_common_pb.TakerGetsCurreny.serializeBinaryToWriter
    );
  }
  f = message.getTakerGetsIssuer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      org_xrpl_rpc_v1_common_pb.TakerGetsIssuer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Flags flags = 1;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RootIndex root_index = 2;
 * @return {?proto.org.xrpl.rpc.v1.RootIndex}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getRootIndex = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.RootIndex} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.RootIndex, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.RootIndex|undefined} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setRootIndex = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearRootIndex = function() {
  this.setRootIndex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.hasRootIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Index indexes = 3;
 * @return {!Array<!proto.org.xrpl.rpc.v1.Index>}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.Index>} */ (
    jspb.Message.getRepeatedWrapperField(this, org_xrpl_rpc_v1_common_pb.Index, 3));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.Index>} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setIndexesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.Index=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.Index}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.org.xrpl.rpc.v1.Index, opt_index);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearIndexesList = function() {
  this.setIndexesList([]);
};


/**
 * optional IndexNext index_next = 4;
 * @return {?proto.org.xrpl.rpc.v1.IndexNext}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getIndexNext = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.IndexNext} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.IndexNext, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.IndexNext|undefined} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setIndexNext = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearIndexNext = function() {
  this.setIndexNext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.hasIndexNext = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional IndexPrevious index_previous = 5;
 * @return {?proto.org.xrpl.rpc.v1.IndexPrevious}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getIndexPrevious = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.IndexPrevious} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.IndexPrevious, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.IndexPrevious|undefined} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setIndexPrevious = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearIndexPrevious = function() {
  this.setIndexPrevious(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.hasIndexPrevious = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Owner owner = 6;
 * @return {?proto.org.xrpl.rpc.v1.Owner}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getOwner = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Owner} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Owner, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.Owner|undefined} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TakerPaysCurrency taker_pays_currency = 7;
 * @return {?proto.org.xrpl.rpc.v1.TakerPaysCurrency}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getTakerPaysCurrency = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TakerPaysCurrency} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TakerPaysCurrency, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.TakerPaysCurrency|undefined} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setTakerPaysCurrency = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearTakerPaysCurrency = function() {
  this.setTakerPaysCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.hasTakerPaysCurrency = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TakerPaysIssuer taker_pays_issuer = 8;
 * @return {?proto.org.xrpl.rpc.v1.TakerPaysIssuer}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getTakerPaysIssuer = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TakerPaysIssuer} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TakerPaysIssuer, 8));
};


/** @param {?proto.org.xrpl.rpc.v1.TakerPaysIssuer|undefined} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setTakerPaysIssuer = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearTakerPaysIssuer = function() {
  this.setTakerPaysIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.hasTakerPaysIssuer = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional TakerGetsCurreny taker_gets_currency = 9;
 * @return {?proto.org.xrpl.rpc.v1.TakerGetsCurreny}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getTakerGetsCurrency = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TakerGetsCurreny} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TakerGetsCurreny, 9));
};


/** @param {?proto.org.xrpl.rpc.v1.TakerGetsCurreny|undefined} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setTakerGetsCurrency = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearTakerGetsCurrency = function() {
  this.setTakerGetsCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.hasTakerGetsCurrency = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional TakerGetsIssuer taker_gets_issuer = 10;
 * @return {?proto.org.xrpl.rpc.v1.TakerGetsIssuer}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.getTakerGetsIssuer = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TakerGetsIssuer} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TakerGetsIssuer, 10));
};


/** @param {?proto.org.xrpl.rpc.v1.TakerGetsIssuer|undefined} value */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.setTakerGetsIssuer = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.org.xrpl.rpc.v1.DirectoryNode.prototype.clearTakerGetsIssuer = function() {
  this.setTakerGetsIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DirectoryNode.prototype.hasTakerGetsIssuer = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Escrow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Escrow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Escrow.displayName = 'proto.org.xrpl.rpc.v1.Escrow';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Escrow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Escrow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Escrow.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_common_pb.Account.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && org_xrpl_rpc_v1_common_pb.Destination.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && org_xrpl_rpc_v1_common_pb.Amount.toObject(includeInstance, f),
    condition: (f = msg.getCondition()) && org_xrpl_rpc_v1_common_pb.Condition.toObject(includeInstance, f),
    cancelAfter: (f = msg.getCancelAfter()) && org_xrpl_rpc_v1_common_pb.CancelAfter.toObject(includeInstance, f),
    finishAfter: (f = msg.getFinishAfter()) && org_xrpl_rpc_v1_common_pb.FinishAfter.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    sourceTag: (f = msg.getSourceTag()) && org_xrpl_rpc_v1_common_pb.SourceTag.toObject(includeInstance, f),
    destinationTag: (f = msg.getDestinationTag()) && org_xrpl_rpc_v1_common_pb.DestinationTag.toObject(includeInstance, f),
    ownerNode: (f = msg.getOwnerNode()) && org_xrpl_rpc_v1_common_pb.OwnerNode.toObject(includeInstance, f),
    destinationNode: (f = msg.getDestinationNode()) && org_xrpl_rpc_v1_common_pb.DestinationNode.toObject(includeInstance, f),
    previousTransactionId: (f = msg.getPreviousTransactionId()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionID.toObject(includeInstance, f),
    previousTransactionLedgerSequence: (f = msg.getPreviousTransactionLedgerSequence()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Escrow}
 */
proto.org.xrpl.rpc.v1.Escrow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Escrow;
  return proto.org.xrpl.rpc.v1.Escrow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Escrow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Escrow}
 */
proto.org.xrpl.rpc.v1.Escrow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Account;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Destination;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Amount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.Condition;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Condition.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.CancelAfter;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.CancelAfter.deserializeBinaryFromReader);
      msg.setCancelAfter(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.FinishAfter;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.FinishAfter.deserializeBinaryFromReader);
      msg.setFinishAfter(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 8:
      var value = new org_xrpl_rpc_v1_common_pb.SourceTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SourceTag.deserializeBinaryFromReader);
      msg.setSourceTag(value);
      break;
    case 9:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationTag.deserializeBinaryFromReader);
      msg.setDestinationTag(value);
      break;
    case 10:
      var value = new org_xrpl_rpc_v1_common_pb.OwnerNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OwnerNode.deserializeBinaryFromReader);
      msg.setOwnerNode(value);
      break;
    case 11:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationNode.deserializeBinaryFromReader);
      msg.setDestinationNode(value);
      break;
    case 12:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionID.deserializeBinaryFromReader);
      msg.setPreviousTransactionId(value);
      break;
    case 13:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.deserializeBinaryFromReader);
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Escrow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Escrow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Escrow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Destination.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.Condition.serializeBinaryToWriter
    );
  }
  f = message.getCancelAfter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.CancelAfter.serializeBinaryToWriter
    );
  }
  f = message.getFinishAfter();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.FinishAfter.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getSourceTag();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      org_xrpl_rpc_v1_common_pb.SourceTag.serializeBinaryToWriter
    );
  }
  f = message.getDestinationTag();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationTag.serializeBinaryToWriter
    );
  }
  f = message.getOwnerNode();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      org_xrpl_rpc_v1_common_pb.OwnerNode.serializeBinaryToWriter
    );
  }
  f = message.getDestinationNode();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationNode.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionId();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.org.xrpl.rpc.v1.Account}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Account} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Account, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Account|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Destination destination = 2;
 * @return {?proto.org.xrpl.rpc.v1.Destination}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getDestination = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Destination} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Destination, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Destination|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Amount amount = 3;
 * @return {?proto.org.xrpl.rpc.v1.Amount}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Amount, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Amount|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Condition condition = 4;
 * @return {?proto.org.xrpl.rpc.v1.Condition}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getCondition = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Condition} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Condition, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.Condition|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setCondition = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearCondition = function() {
  this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CancelAfter cancel_after = 5;
 * @return {?proto.org.xrpl.rpc.v1.CancelAfter}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getCancelAfter = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CancelAfter} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.CancelAfter, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.CancelAfter|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setCancelAfter = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearCancelAfter = function() {
  this.setCancelAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasCancelAfter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FinishAfter finish_after = 6;
 * @return {?proto.org.xrpl.rpc.v1.FinishAfter}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getFinishAfter = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.FinishAfter} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.FinishAfter, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.FinishAfter|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setFinishAfter = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearFinishAfter = function() {
  this.setFinishAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasFinishAfter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Flags flags = 7;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SourceTag source_tag = 8;
 * @return {?proto.org.xrpl.rpc.v1.SourceTag}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getSourceTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SourceTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SourceTag, 8));
};


/** @param {?proto.org.xrpl.rpc.v1.SourceTag|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setSourceTag = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearSourceTag = function() {
  this.setSourceTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasSourceTag = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DestinationTag destination_tag = 9;
 * @return {?proto.org.xrpl.rpc.v1.DestinationTag}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getDestinationTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationTag, 9));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationTag|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setDestinationTag = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearDestinationTag = function() {
  this.setDestinationTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasDestinationTag = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OwnerNode owner_node = 10;
 * @return {?proto.org.xrpl.rpc.v1.OwnerNode}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getOwnerNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OwnerNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OwnerNode, 10));
};


/** @param {?proto.org.xrpl.rpc.v1.OwnerNode|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setOwnerNode = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearOwnerNode = function() {
  this.setOwnerNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasOwnerNode = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DestinationNode destination_node = 11;
 * @return {?proto.org.xrpl.rpc.v1.DestinationNode}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getDestinationNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationNode, 11));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationNode|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setDestinationNode = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearDestinationNode = function() {
  this.setDestinationNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasDestinationNode = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PreviousTransactionID previous_transaction_id = 12;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionID}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getPreviousTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionID, 12));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearPreviousTransactionId = function() {
  this.setPreviousTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasPreviousTransactionId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 13;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence, 13));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.Escrow.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.org.xrpl.rpc.v1.Escrow.prototype.clearPreviousTransactionLedgerSequence = function() {
  this.setPreviousTransactionLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Escrow.prototype.hasPreviousTransactionLedgerSequence = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.FeeSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.FeeSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.FeeSettings.displayName = 'proto.org.xrpl.rpc.v1.FeeSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.FeeSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.FeeSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.FeeSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseFee: (f = msg.getBaseFee()) && org_xrpl_rpc_v1_common_pb.BaseFee.toObject(includeInstance, f),
    referenceFeeUnits: (f = msg.getReferenceFeeUnits()) && org_xrpl_rpc_v1_common_pb.ReferenceFeeUnits.toObject(includeInstance, f),
    reserveBase: (f = msg.getReserveBase()) && org_xrpl_rpc_v1_common_pb.ReserveBase.toObject(includeInstance, f),
    reserveIncrement: (f = msg.getReserveIncrement()) && org_xrpl_rpc_v1_common_pb.ReserveIncrement.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.FeeSettings}
 */
proto.org.xrpl.rpc.v1.FeeSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.FeeSettings;
  return proto.org.xrpl.rpc.v1.FeeSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.FeeSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.FeeSettings}
 */
proto.org.xrpl.rpc.v1.FeeSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.BaseFee;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.BaseFee.deserializeBinaryFromReader);
      msg.setBaseFee(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.ReferenceFeeUnits;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.ReferenceFeeUnits.deserializeBinaryFromReader);
      msg.setReferenceFeeUnits(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.ReserveBase;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.ReserveBase.deserializeBinaryFromReader);
      msg.setReserveBase(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.ReserveIncrement;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.ReserveIncrement.deserializeBinaryFromReader);
      msg.setReserveIncrement(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.FeeSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.FeeSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.FeeSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.BaseFee.serializeBinaryToWriter
    );
  }
  f = message.getReferenceFeeUnits();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.ReferenceFeeUnits.serializeBinaryToWriter
    );
  }
  f = message.getReserveBase();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.ReserveBase.serializeBinaryToWriter
    );
  }
  f = message.getReserveIncrement();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.ReserveIncrement.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
};


/**
 * optional BaseFee base_fee = 1;
 * @return {?proto.org.xrpl.rpc.v1.BaseFee}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.getBaseFee = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.BaseFee} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.BaseFee, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.BaseFee|undefined} value */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.setBaseFee = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.FeeSettings.prototype.clearBaseFee = function() {
  this.setBaseFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.hasBaseFee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReferenceFeeUnits reference_fee_units = 2;
 * @return {?proto.org.xrpl.rpc.v1.ReferenceFeeUnits}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.getReferenceFeeUnits = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.ReferenceFeeUnits} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.ReferenceFeeUnits, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.ReferenceFeeUnits|undefined} value */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.setReferenceFeeUnits = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.FeeSettings.prototype.clearReferenceFeeUnits = function() {
  this.setReferenceFeeUnits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.hasReferenceFeeUnits = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReserveBase reserve_base = 3;
 * @return {?proto.org.xrpl.rpc.v1.ReserveBase}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.getReserveBase = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.ReserveBase} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.ReserveBase, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.ReserveBase|undefined} value */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.setReserveBase = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.FeeSettings.prototype.clearReserveBase = function() {
  this.setReserveBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.hasReserveBase = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ReserveIncrement reserve_increment = 4;
 * @return {?proto.org.xrpl.rpc.v1.ReserveIncrement}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.getReserveIncrement = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.ReserveIncrement} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.ReserveIncrement, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.ReserveIncrement|undefined} value */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.setReserveIncrement = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.FeeSettings.prototype.clearReserveIncrement = function() {
  this.setReserveIncrement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.hasReserveIncrement = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Flags flags = 5;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.FeeSettings.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.FeeSettings.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.LedgerHashes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.LedgerHashes.repeatedFields_, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.LedgerHashes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.LedgerHashes.displayName = 'proto.org.xrpl.rpc.v1.LedgerHashes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.LedgerHashes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.LedgerHashes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.LedgerHashes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.LedgerHashes.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastLedgerSequence: (f = msg.getLastLedgerSequence()) && org_xrpl_rpc_v1_common_pb.LastLedgerSequence.toObject(includeInstance, f),
    hashesList: jspb.Message.toObjectList(msg.getHashesList(),
    org_xrpl_rpc_v1_common_pb.Hash.toObject, includeInstance),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.LedgerHashes}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.LedgerHashes;
  return proto.org.xrpl.rpc.v1.LedgerHashes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.LedgerHashes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.LedgerHashes}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.LastLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.LastLedgerSequence.deserializeBinaryFromReader);
      msg.setLastLedgerSequence(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Hash;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Hash.deserializeBinaryFromReader);
      msg.addHashes(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.LedgerHashes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.LedgerHashes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.LedgerHashes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.LastLedgerSequence.serializeBinaryToWriter
    );
  }
  f = message.getHashesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
};


/**
 * optional LastLedgerSequence last_ledger_sequence = 1;
 * @return {?proto.org.xrpl.rpc.v1.LastLedgerSequence}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.getLastLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LastLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.LastLedgerSequence, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.LastLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.setLastLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.LedgerHashes.prototype.clearLastLedgerSequence = function() {
  this.setLastLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.hasLastLedgerSequence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Hash hashes = 2;
 * @return {!Array<!proto.org.xrpl.rpc.v1.Hash>}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.getHashesList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.Hash>} */ (
    jspb.Message.getRepeatedWrapperField(this, org_xrpl_rpc_v1_common_pb.Hash, 2));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.Hash>} value */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.setHashesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.Hash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.Hash}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.addHashes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.org.xrpl.rpc.v1.Hash, opt_index);
};


proto.org.xrpl.rpc.v1.LedgerHashes.prototype.clearHashesList = function() {
  this.setHashesList([]);
};


/**
 * optional Flags flags = 3;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.LedgerHashes.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerHashes.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Offer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Offer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Offer.displayName = 'proto.org.xrpl.rpc.v1.Offer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Offer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Offer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Offer.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_common_pb.Account.toObject(includeInstance, f),
    sequence: (f = msg.getSequence()) && org_xrpl_rpc_v1_common_pb.Sequence.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    takerPays: (f = msg.getTakerPays()) && org_xrpl_rpc_v1_common_pb.TakerPays.toObject(includeInstance, f),
    takerGets: (f = msg.getTakerGets()) && org_xrpl_rpc_v1_common_pb.TakerGets.toObject(includeInstance, f),
    bookDirectory: (f = msg.getBookDirectory()) && org_xrpl_rpc_v1_common_pb.BookDirectory.toObject(includeInstance, f),
    bookNode: (f = msg.getBookNode()) && org_xrpl_rpc_v1_common_pb.BookNode.toObject(includeInstance, f),
    ownerNode: (f = msg.getOwnerNode()) && org_xrpl_rpc_v1_common_pb.OwnerNode.toObject(includeInstance, f),
    expiration: (f = msg.getExpiration()) && org_xrpl_rpc_v1_common_pb.Expiration.toObject(includeInstance, f),
    previousTransactionId: (f = msg.getPreviousTransactionId()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionID.toObject(includeInstance, f),
    previousTransactionLedgerSequence: (f = msg.getPreviousTransactionLedgerSequence()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Offer}
 */
proto.org.xrpl.rpc.v1.Offer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Offer;
  return proto.org.xrpl.rpc.v1.Offer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Offer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Offer}
 */
proto.org.xrpl.rpc.v1.Offer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Account;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Sequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Sequence.deserializeBinaryFromReader);
      msg.setSequence(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.TakerPays;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TakerPays.deserializeBinaryFromReader);
      msg.setTakerPays(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.TakerGets;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TakerGets.deserializeBinaryFromReader);
      msg.setTakerGets(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.BookDirectory;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.BookDirectory.deserializeBinaryFromReader);
      msg.setBookDirectory(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.BookNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.BookNode.deserializeBinaryFromReader);
      msg.setBookNode(value);
      break;
    case 8:
      var value = new org_xrpl_rpc_v1_common_pb.OwnerNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OwnerNode.deserializeBinaryFromReader);
      msg.setOwnerNode(value);
      break;
    case 9:
      var value = new org_xrpl_rpc_v1_common_pb.Expiration;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Expiration.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 10:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionID.deserializeBinaryFromReader);
      msg.setPreviousTransactionId(value);
      break;
    case 11:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.deserializeBinaryFromReader);
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Offer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Offer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Offer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Sequence.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getTakerPays();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.TakerPays.serializeBinaryToWriter
    );
  }
  f = message.getTakerGets();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.TakerGets.serializeBinaryToWriter
    );
  }
  f = message.getBookDirectory();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.BookDirectory.serializeBinaryToWriter
    );
  }
  f = message.getBookNode();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.BookNode.serializeBinaryToWriter
    );
  }
  f = message.getOwnerNode();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      org_xrpl_rpc_v1_common_pb.OwnerNode.serializeBinaryToWriter
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      org_xrpl_rpc_v1_common_pb.Expiration.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionId();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.org.xrpl.rpc.v1.Account}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Account} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Account, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Account|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Sequence sequence = 2;
 * @return {?proto.org.xrpl.rpc.v1.Sequence}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Sequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Sequence, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Sequence|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setSequence = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearSequence = function() {
  this.setSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Flags flags = 3;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TakerPays taker_pays = 4;
 * @return {?proto.org.xrpl.rpc.v1.TakerPays}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getTakerPays = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TakerPays} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TakerPays, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.TakerPays|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setTakerPays = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearTakerPays = function() {
  this.setTakerPays(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasTakerPays = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TakerGets taker_gets = 5;
 * @return {?proto.org.xrpl.rpc.v1.TakerGets}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getTakerGets = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TakerGets} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TakerGets, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.TakerGets|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setTakerGets = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearTakerGets = function() {
  this.setTakerGets(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasTakerGets = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BookDirectory book_directory = 6;
 * @return {?proto.org.xrpl.rpc.v1.BookDirectory}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getBookDirectory = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.BookDirectory} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.BookDirectory, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.BookDirectory|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setBookDirectory = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearBookDirectory = function() {
  this.setBookDirectory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasBookDirectory = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BookNode book_node = 7;
 * @return {?proto.org.xrpl.rpc.v1.BookNode}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getBookNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.BookNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.BookNode, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.BookNode|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setBookNode = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearBookNode = function() {
  this.setBookNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasBookNode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OwnerNode owner_node = 8;
 * @return {?proto.org.xrpl.rpc.v1.OwnerNode}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getOwnerNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OwnerNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OwnerNode, 8));
};


/** @param {?proto.org.xrpl.rpc.v1.OwnerNode|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setOwnerNode = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearOwnerNode = function() {
  this.setOwnerNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasOwnerNode = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Expiration expiration = 9;
 * @return {?proto.org.xrpl.rpc.v1.Expiration}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getExpiration = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Expiration} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Expiration, 9));
};


/** @param {?proto.org.xrpl.rpc.v1.Expiration|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PreviousTransactionID previous_transaction_id = 10;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionID}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getPreviousTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionID, 10));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearPreviousTransactionId = function() {
  this.setPreviousTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasPreviousTransactionId = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 11;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence, 11));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.Offer.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.org.xrpl.rpc.v1.Offer.prototype.clearPreviousTransactionLedgerSequence = function() {
  this.setPreviousTransactionLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Offer.prototype.hasPreviousTransactionLedgerSequence = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.PayChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.PayChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.PayChannel.displayName = 'proto.org.xrpl.rpc.v1.PayChannel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.PayChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.PayChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.PayChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_common_pb.Account.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && org_xrpl_rpc_v1_common_pb.Destination.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && org_xrpl_rpc_v1_common_pb.Amount.toObject(includeInstance, f),
    balance: (f = msg.getBalance()) && org_xrpl_rpc_v1_common_pb.Balance.toObject(includeInstance, f),
    publicKey: (f = msg.getPublicKey()) && org_xrpl_rpc_v1_common_pb.PublicKey.toObject(includeInstance, f),
    settleDelay: (f = msg.getSettleDelay()) && org_xrpl_rpc_v1_common_pb.SettleDelay.toObject(includeInstance, f),
    ownerNode: (f = msg.getOwnerNode()) && org_xrpl_rpc_v1_common_pb.OwnerNode.toObject(includeInstance, f),
    previousTransactionId: (f = msg.getPreviousTransactionId()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionID.toObject(includeInstance, f),
    previousTransactionLedgerSequence: (f = msg.getPreviousTransactionLedgerSequence()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    expiration: (f = msg.getExpiration()) && org_xrpl_rpc_v1_common_pb.Expiration.toObject(includeInstance, f),
    cancelAfter: (f = msg.getCancelAfter()) && org_xrpl_rpc_v1_common_pb.CancelAfter.toObject(includeInstance, f),
    sourceTag: (f = msg.getSourceTag()) && org_xrpl_rpc_v1_common_pb.SourceTag.toObject(includeInstance, f),
    destinationTag: (f = msg.getDestinationTag()) && org_xrpl_rpc_v1_common_pb.DestinationTag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.PayChannel}
 */
proto.org.xrpl.rpc.v1.PayChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.PayChannel;
  return proto.org.xrpl.rpc.v1.PayChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.PayChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.PayChannel}
 */
proto.org.xrpl.rpc.v1.PayChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Account;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Destination;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Amount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.Balance;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Balance.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.PublicKey;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.SettleDelay;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SettleDelay.deserializeBinaryFromReader);
      msg.setSettleDelay(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.OwnerNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OwnerNode.deserializeBinaryFromReader);
      msg.setOwnerNode(value);
      break;
    case 8:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionID.deserializeBinaryFromReader);
      msg.setPreviousTransactionId(value);
      break;
    case 9:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.deserializeBinaryFromReader);
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    case 10:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 11:
      var value = new org_xrpl_rpc_v1_common_pb.Expiration;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Expiration.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 12:
      var value = new org_xrpl_rpc_v1_common_pb.CancelAfter;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.CancelAfter.deserializeBinaryFromReader);
      msg.setCancelAfter(value);
      break;
    case 13:
      var value = new org_xrpl_rpc_v1_common_pb.SourceTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SourceTag.deserializeBinaryFromReader);
      msg.setSourceTag(value);
      break;
    case 14:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationTag.deserializeBinaryFromReader);
      msg.setDestinationTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.PayChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.PayChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.PayChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Destination.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.Balance.serializeBinaryToWriter
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getSettleDelay();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.SettleDelay.serializeBinaryToWriter
    );
  }
  f = message.getOwnerNode();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.OwnerNode.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionId();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      org_xrpl_rpc_v1_common_pb.Expiration.serializeBinaryToWriter
    );
  }
  f = message.getCancelAfter();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      org_xrpl_rpc_v1_common_pb.CancelAfter.serializeBinaryToWriter
    );
  }
  f = message.getSourceTag();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      org_xrpl_rpc_v1_common_pb.SourceTag.serializeBinaryToWriter
    );
  }
  f = message.getDestinationTag();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.org.xrpl.rpc.v1.Account}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Account} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Account, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Account|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Destination destination = 2;
 * @return {?proto.org.xrpl.rpc.v1.Destination}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getDestination = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Destination} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Destination, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Destination|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Amount amount = 3;
 * @return {?proto.org.xrpl.rpc.v1.Amount}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Amount, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Amount|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Balance balance = 4;
 * @return {?proto.org.xrpl.rpc.v1.Balance}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getBalance = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Balance} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Balance, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.Balance|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setBalance = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearBalance = function() {
  this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PublicKey public_key = 5;
 * @return {?proto.org.xrpl.rpc.v1.PublicKey}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getPublicKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PublicKey} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PublicKey, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.PublicKey|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setPublicKey = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearPublicKey = function() {
  this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SettleDelay settle_delay = 6;
 * @return {?proto.org.xrpl.rpc.v1.SettleDelay}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getSettleDelay = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SettleDelay} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SettleDelay, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.SettleDelay|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setSettleDelay = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearSettleDelay = function() {
  this.setSettleDelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasSettleDelay = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OwnerNode owner_node = 7;
 * @return {?proto.org.xrpl.rpc.v1.OwnerNode}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getOwnerNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OwnerNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OwnerNode, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.OwnerNode|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setOwnerNode = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearOwnerNode = function() {
  this.setOwnerNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasOwnerNode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PreviousTransactionID previous_transaction_id = 8;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionID}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getPreviousTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionID, 8));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearPreviousTransactionId = function() {
  this.setPreviousTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasPreviousTransactionId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 9;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence, 9));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearPreviousTransactionLedgerSequence = function() {
  this.setPreviousTransactionLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasPreviousTransactionLedgerSequence = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Flags flags = 10;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 10));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Expiration expiration = 11;
 * @return {?proto.org.xrpl.rpc.v1.Expiration}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getExpiration = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Expiration} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Expiration, 11));
};


/** @param {?proto.org.xrpl.rpc.v1.Expiration|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CancelAfter cancel_after = 12;
 * @return {?proto.org.xrpl.rpc.v1.CancelAfter}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getCancelAfter = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CancelAfter} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.CancelAfter, 12));
};


/** @param {?proto.org.xrpl.rpc.v1.CancelAfter|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setCancelAfter = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearCancelAfter = function() {
  this.setCancelAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasCancelAfter = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SourceTag source_tag = 13;
 * @return {?proto.org.xrpl.rpc.v1.SourceTag}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getSourceTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SourceTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SourceTag, 13));
};


/** @param {?proto.org.xrpl.rpc.v1.SourceTag|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setSourceTag = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearSourceTag = function() {
  this.setSourceTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasSourceTag = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional DestinationTag destination_tag = 14;
 * @return {?proto.org.xrpl.rpc.v1.DestinationTag}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.getDestinationTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationTag, 14));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationTag|undefined} value */
proto.org.xrpl.rpc.v1.PayChannel.prototype.setDestinationTag = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.org.xrpl.rpc.v1.PayChannel.prototype.clearDestinationTag = function() {
  this.setDestinationTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PayChannel.prototype.hasDestinationTag = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.RippleState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.RippleState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.RippleState.displayName = 'proto.org.xrpl.rpc.v1.RippleState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.RippleState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.RippleState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.RippleState.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: (f = msg.getBalance()) && org_xrpl_rpc_v1_common_pb.Balance.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    lowLimit: (f = msg.getLowLimit()) && org_xrpl_rpc_v1_common_pb.LowLimit.toObject(includeInstance, f),
    highLimit: (f = msg.getHighLimit()) && org_xrpl_rpc_v1_common_pb.HighLimit.toObject(includeInstance, f),
    lowNode: (f = msg.getLowNode()) && org_xrpl_rpc_v1_common_pb.LowNode.toObject(includeInstance, f),
    highNode: (f = msg.getHighNode()) && org_xrpl_rpc_v1_common_pb.HighNode.toObject(includeInstance, f),
    lowQualityIn: (f = msg.getLowQualityIn()) && org_xrpl_rpc_v1_common_pb.LowQualityIn.toObject(includeInstance, f),
    lowQualityOut: (f = msg.getLowQualityOut()) && org_xrpl_rpc_v1_common_pb.LowQualityOut.toObject(includeInstance, f),
    highQualityIn: (f = msg.getHighQualityIn()) && org_xrpl_rpc_v1_common_pb.HighQualityIn.toObject(includeInstance, f),
    highQualityOut: (f = msg.getHighQualityOut()) && org_xrpl_rpc_v1_common_pb.HighQualityOut.toObject(includeInstance, f),
    previousTransactionId: (f = msg.getPreviousTransactionId()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionID.toObject(includeInstance, f),
    previousTransactionLedgerSequence: (f = msg.getPreviousTransactionLedgerSequence()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.RippleState}
 */
proto.org.xrpl.rpc.v1.RippleState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.RippleState;
  return proto.org.xrpl.rpc.v1.RippleState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.RippleState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.RippleState}
 */
proto.org.xrpl.rpc.v1.RippleState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Balance;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Balance.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.LowLimit;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.LowLimit.deserializeBinaryFromReader);
      msg.setLowLimit(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.HighLimit;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.HighLimit.deserializeBinaryFromReader);
      msg.setHighLimit(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.LowNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.LowNode.deserializeBinaryFromReader);
      msg.setLowNode(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.HighNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.HighNode.deserializeBinaryFromReader);
      msg.setHighNode(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.LowQualityIn;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.LowQualityIn.deserializeBinaryFromReader);
      msg.setLowQualityIn(value);
      break;
    case 8:
      var value = new org_xrpl_rpc_v1_common_pb.LowQualityOut;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.LowQualityOut.deserializeBinaryFromReader);
      msg.setLowQualityOut(value);
      break;
    case 9:
      var value = new org_xrpl_rpc_v1_common_pb.HighQualityIn;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.HighQualityIn.deserializeBinaryFromReader);
      msg.setHighQualityIn(value);
      break;
    case 10:
      var value = new org_xrpl_rpc_v1_common_pb.HighQualityOut;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.HighQualityOut.deserializeBinaryFromReader);
      msg.setHighQualityOut(value);
      break;
    case 11:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionID.deserializeBinaryFromReader);
      msg.setPreviousTransactionId(value);
      break;
    case 12:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.deserializeBinaryFromReader);
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.RippleState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.RippleState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.RippleState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Balance.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getLowLimit();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.LowLimit.serializeBinaryToWriter
    );
  }
  f = message.getHighLimit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.HighLimit.serializeBinaryToWriter
    );
  }
  f = message.getLowNode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.LowNode.serializeBinaryToWriter
    );
  }
  f = message.getHighNode();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.HighNode.serializeBinaryToWriter
    );
  }
  f = message.getLowQualityIn();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.LowQualityIn.serializeBinaryToWriter
    );
  }
  f = message.getLowQualityOut();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      org_xrpl_rpc_v1_common_pb.LowQualityOut.serializeBinaryToWriter
    );
  }
  f = message.getHighQualityIn();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      org_xrpl_rpc_v1_common_pb.HighQualityIn.serializeBinaryToWriter
    );
  }
  f = message.getHighQualityOut();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      org_xrpl_rpc_v1_common_pb.HighQualityOut.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionId();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional Balance balance = 1;
 * @return {?proto.org.xrpl.rpc.v1.Balance}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getBalance = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Balance} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Balance, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Balance|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setBalance = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearBalance = function() {
  this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Flags flags = 2;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LowLimit low_limit = 3;
 * @return {?proto.org.xrpl.rpc.v1.LowLimit}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getLowLimit = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LowLimit} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.LowLimit, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.LowLimit|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setLowLimit = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearLowLimit = function() {
  this.setLowLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasLowLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HighLimit high_limit = 4;
 * @return {?proto.org.xrpl.rpc.v1.HighLimit}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getHighLimit = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.HighLimit} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.HighLimit, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.HighLimit|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setHighLimit = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearHighLimit = function() {
  this.setHighLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasHighLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LowNode low_node = 5;
 * @return {?proto.org.xrpl.rpc.v1.LowNode}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getLowNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LowNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.LowNode, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.LowNode|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setLowNode = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearLowNode = function() {
  this.setLowNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasLowNode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional HighNode high_node = 6;
 * @return {?proto.org.xrpl.rpc.v1.HighNode}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getHighNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.HighNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.HighNode, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.HighNode|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setHighNode = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearHighNode = function() {
  this.setHighNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasHighNode = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional LowQualityIn low_quality_in = 7;
 * @return {?proto.org.xrpl.rpc.v1.LowQualityIn}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getLowQualityIn = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LowQualityIn} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.LowQualityIn, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.LowQualityIn|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setLowQualityIn = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearLowQualityIn = function() {
  this.setLowQualityIn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasLowQualityIn = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional LowQualityOut low_quality_out = 8;
 * @return {?proto.org.xrpl.rpc.v1.LowQualityOut}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getLowQualityOut = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LowQualityOut} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.LowQualityOut, 8));
};


/** @param {?proto.org.xrpl.rpc.v1.LowQualityOut|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setLowQualityOut = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearLowQualityOut = function() {
  this.setLowQualityOut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasLowQualityOut = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional HighQualityIn high_quality_in = 9;
 * @return {?proto.org.xrpl.rpc.v1.HighQualityIn}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getHighQualityIn = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.HighQualityIn} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.HighQualityIn, 9));
};


/** @param {?proto.org.xrpl.rpc.v1.HighQualityIn|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setHighQualityIn = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearHighQualityIn = function() {
  this.setHighQualityIn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasHighQualityIn = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional HighQualityOut high_quality_out = 10;
 * @return {?proto.org.xrpl.rpc.v1.HighQualityOut}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getHighQualityOut = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.HighQualityOut} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.HighQualityOut, 10));
};


/** @param {?proto.org.xrpl.rpc.v1.HighQualityOut|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setHighQualityOut = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearHighQualityOut = function() {
  this.setHighQualityOut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasHighQualityOut = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PreviousTransactionID previous_transaction_id = 11;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionID}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getPreviousTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionID, 11));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearPreviousTransactionId = function() {
  this.setPreviousTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasPreviousTransactionId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 12;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence, 12));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.RippleState.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.org.xrpl.rpc.v1.RippleState.prototype.clearPreviousTransactionLedgerSequence = function() {
  this.setPreviousTransactionLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.RippleState.prototype.hasPreviousTransactionLedgerSequence = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.SignerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.SignerList.repeatedFields_, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.SignerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.SignerList.displayName = 'proto.org.xrpl.rpc.v1.SignerList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.SignerList.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.SignerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.SignerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.SignerList.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    previousTransactionId: (f = msg.getPreviousTransactionId()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionID.toObject(includeInstance, f),
    previousTransactionLedgerSequence: (f = msg.getPreviousTransactionLedgerSequence()) && org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.toObject(includeInstance, f),
    ownerNode: (f = msg.getOwnerNode()) && org_xrpl_rpc_v1_common_pb.OwnerNode.toObject(includeInstance, f),
    signerEntriesList: jspb.Message.toObjectList(msg.getSignerEntriesList(),
    org_xrpl_rpc_v1_common_pb.SignerEntry.toObject, includeInstance),
    signerListId: (f = msg.getSignerListId()) && org_xrpl_rpc_v1_common_pb.SignerListID.toObject(includeInstance, f),
    signerQuorum: (f = msg.getSignerQuorum()) && org_xrpl_rpc_v1_common_pb.SignerQuorum.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.SignerList}
 */
proto.org.xrpl.rpc.v1.SignerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.SignerList;
  return proto.org.xrpl.rpc.v1.SignerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.SignerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.SignerList}
 */
proto.org.xrpl.rpc.v1.SignerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionID.deserializeBinaryFromReader);
      msg.setPreviousTransactionId(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.deserializeBinaryFromReader);
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.OwnerNode;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OwnerNode.deserializeBinaryFromReader);
      msg.setOwnerNode(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.SignerEntry;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SignerEntry.deserializeBinaryFromReader);
      msg.addSignerEntries(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.SignerListID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SignerListID.deserializeBinaryFromReader);
      msg.setSignerListId(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.SignerQuorum;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SignerQuorum.deserializeBinaryFromReader);
      msg.setSignerQuorum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.SignerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.SignerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.SignerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionID.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence.serializeBinaryToWriter
    );
  }
  f = message.getOwnerNode();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.OwnerNode.serializeBinaryToWriter
    );
  }
  f = message.getSignerEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.SignerEntry.serializeBinaryToWriter
    );
  }
  f = message.getSignerListId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.SignerListID.serializeBinaryToWriter
    );
  }
  f = message.getSignerQuorum();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.SignerQuorum.serializeBinaryToWriter
    );
  }
};


/**
 * optional Flags flags = 1;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.SignerList.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.SignerList.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PreviousTransactionID previous_transaction_id = 2;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionID}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.getPreviousTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionID, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.SignerList.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.SignerList.prototype.clearPreviousTransactionId = function() {
  this.setPreviousTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.hasPreviousTransactionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 3;
 * @return {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PreviousTransactionLedgerSequence, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.PreviousTransactionLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.SignerList.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.SignerList.prototype.clearPreviousTransactionLedgerSequence = function() {
  this.setPreviousTransactionLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.hasPreviousTransactionLedgerSequence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OwnerNode owner_node = 4;
 * @return {?proto.org.xrpl.rpc.v1.OwnerNode}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.getOwnerNode = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OwnerNode} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OwnerNode, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.OwnerNode|undefined} value */
proto.org.xrpl.rpc.v1.SignerList.prototype.setOwnerNode = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.SignerList.prototype.clearOwnerNode = function() {
  this.setOwnerNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.hasOwnerNode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated SignerEntry signer_entries = 5;
 * @return {!Array<!proto.org.xrpl.rpc.v1.SignerEntry>}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.getSignerEntriesList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.SignerEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, org_xrpl_rpc_v1_common_pb.SignerEntry, 5));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.SignerEntry>} value */
proto.org.xrpl.rpc.v1.SignerList.prototype.setSignerEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.SignerEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.SignerEntry}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.addSignerEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.org.xrpl.rpc.v1.SignerEntry, opt_index);
};


proto.org.xrpl.rpc.v1.SignerList.prototype.clearSignerEntriesList = function() {
  this.setSignerEntriesList([]);
};


/**
 * optional SignerListID signer_list_id = 6;
 * @return {?proto.org.xrpl.rpc.v1.SignerListID}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.getSignerListId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SignerListID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SignerListID, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.SignerListID|undefined} value */
proto.org.xrpl.rpc.v1.SignerList.prototype.setSignerListId = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.SignerList.prototype.clearSignerListId = function() {
  this.setSignerListId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.hasSignerListId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SignerQuorum signer_quorum = 7;
 * @return {?proto.org.xrpl.rpc.v1.SignerQuorum}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.getSignerQuorum = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SignerQuorum} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SignerQuorum, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.SignerQuorum|undefined} value */
proto.org.xrpl.rpc.v1.SignerList.prototype.setSignerQuorum = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.SignerList.prototype.clearSignerQuorum = function() {
  this.setSignerQuorum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.SignerList.prototype.hasSignerQuorum = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.LedgerEntryType = {
  LEDGER_ENTRY_TYPE_UNSPECIFIED: 0,
  LEDGER_ENTRY_TYPE_ACCOUNT_ROOT: 1,
  LEDGER_ENTRY_TYPE_AMENDMENTS: 2,
  LEDGER_ENTRY_TYPE_CHECK: 3,
  LEDGER_ENTRY_TYPE_DEPOSIT_PREAUTH: 4,
  LEDGER_ENTRY_TYPE_DIRECTORY_NODE: 5,
  LEDGER_ENTRY_TYPE_ESCROW: 6,
  LEDGER_ENTRY_TYPE_FEE_SETTINGS: 7,
  LEDGER_ENTRY_TYPE_LEDGER_HASHES: 8,
  LEDGER_ENTRY_TYPE_OFFER: 9,
  LEDGER_ENTRY_TYPE_PAY_CHANNEL: 10,
  LEDGER_ENTRY_TYPE_RIPPLE_STATE: 11,
  LEDGER_ENTRY_TYPE_SIGNER_LIST: 12
};

goog.object.extend(exports, proto.org.xrpl.rpc.v1);
