/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var org_xrpl_rpc_v1_common_pb = require('../../../../org/xrpl/rpc/v1/common_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_common_pb);
var org_xrpl_rpc_v1_amount_pb = require('../../../../org/xrpl/rpc/v1/amount_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_amount_pb);
var org_xrpl_rpc_v1_account_pb = require('../../../../org/xrpl/rpc/v1/account_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_account_pb);
goog.exportSymbol('proto.org.xrpl.rpc.v1.AccountDelete', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.AccountSet', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.CheckCancel', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.CheckCash', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.CheckCreate', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.DepositPreauth', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.EscrowCancel', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.EscrowCreate', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.EscrowFinish', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Memo', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.OfferCancel', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.OfferCreate', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Payment', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Payment.Path', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Payment.PathElement', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.PaymentChannelClaim', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.PaymentChannelCreate', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.PaymentChannelFund', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.SetRegularKey', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Signer', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.SignerListSet', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Transaction', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.TrustSet', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.Transaction.repeatedFields_, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_);
};
goog.inherits(proto.org.xrpl.rpc.v1.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Transaction.displayName = 'proto.org.xrpl.rpc.v1.Transaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.Transaction.repeatedFields_ = [10,11];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.xrpl.rpc.v1.Transaction.oneofGroups_ = [[4,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]];

/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.Transaction.TransactionDataCase = {
  TRANSACTION_DATA_NOT_SET: 0,
  PAYMENT: 4,
  ACCOUNT_SET: 13,
  ACCOUNT_DELETE: 14,
  CHECK_CANCEL: 15,
  CHECK_CASH: 16,
  CHECK_CREATE: 17,
  DEPOSIT_PREAUTH: 18,
  ESCROW_CANCEL: 19,
  ESCROW_CREATE: 20,
  ESCROW_FINISH: 21,
  OFFER_CANCEL: 22,
  OFFER_CREATE: 23,
  PAYMENT_CHANNEL_CLAIM: 24,
  PAYMENT_CHANNEL_CREATE: 25,
  PAYMENT_CHANNEL_FUND: 26,
  SET_REGULAR_KEY: 27,
  SIGNER_LIST_SET: 28,
  TRUST_SET: 29
};

/**
 * @return {proto.org.xrpl.rpc.v1.Transaction.TransactionDataCase}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getTransactionDataCase = function() {
  return /** @type {proto.org.xrpl.rpc.v1.Transaction.TransactionDataCase} */(jspb.Message.computeOneofCase(this, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_common_pb.Account.toObject(includeInstance, f),
    fee: (f = msg.getFee()) && org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f),
    sequence: (f = msg.getSequence()) && org_xrpl_rpc_v1_common_pb.Sequence.toObject(includeInstance, f),
    payment: (f = msg.getPayment()) && proto.org.xrpl.rpc.v1.Payment.toObject(includeInstance, f),
    accountSet: (f = msg.getAccountSet()) && proto.org.xrpl.rpc.v1.AccountSet.toObject(includeInstance, f),
    accountDelete: (f = msg.getAccountDelete()) && proto.org.xrpl.rpc.v1.AccountDelete.toObject(includeInstance, f),
    checkCancel: (f = msg.getCheckCancel()) && proto.org.xrpl.rpc.v1.CheckCancel.toObject(includeInstance, f),
    checkCash: (f = msg.getCheckCash()) && proto.org.xrpl.rpc.v1.CheckCash.toObject(includeInstance, f),
    checkCreate: (f = msg.getCheckCreate()) && proto.org.xrpl.rpc.v1.CheckCreate.toObject(includeInstance, f),
    depositPreauth: (f = msg.getDepositPreauth()) && proto.org.xrpl.rpc.v1.DepositPreauth.toObject(includeInstance, f),
    escrowCancel: (f = msg.getEscrowCancel()) && proto.org.xrpl.rpc.v1.EscrowCancel.toObject(includeInstance, f),
    escrowCreate: (f = msg.getEscrowCreate()) && proto.org.xrpl.rpc.v1.EscrowCreate.toObject(includeInstance, f),
    escrowFinish: (f = msg.getEscrowFinish()) && proto.org.xrpl.rpc.v1.EscrowFinish.toObject(includeInstance, f),
    offerCancel: (f = msg.getOfferCancel()) && proto.org.xrpl.rpc.v1.OfferCancel.toObject(includeInstance, f),
    offerCreate: (f = msg.getOfferCreate()) && proto.org.xrpl.rpc.v1.OfferCreate.toObject(includeInstance, f),
    paymentChannelClaim: (f = msg.getPaymentChannelClaim()) && proto.org.xrpl.rpc.v1.PaymentChannelClaim.toObject(includeInstance, f),
    paymentChannelCreate: (f = msg.getPaymentChannelCreate()) && proto.org.xrpl.rpc.v1.PaymentChannelCreate.toObject(includeInstance, f),
    paymentChannelFund: (f = msg.getPaymentChannelFund()) && proto.org.xrpl.rpc.v1.PaymentChannelFund.toObject(includeInstance, f),
    setRegularKey: (f = msg.getSetRegularKey()) && proto.org.xrpl.rpc.v1.SetRegularKey.toObject(includeInstance, f),
    signerListSet: (f = msg.getSignerListSet()) && proto.org.xrpl.rpc.v1.SignerListSet.toObject(includeInstance, f),
    trustSet: (f = msg.getTrustSet()) && proto.org.xrpl.rpc.v1.TrustSet.toObject(includeInstance, f),
    signingPublicKey: (f = msg.getSigningPublicKey()) && org_xrpl_rpc_v1_common_pb.SigningPublicKey.toObject(includeInstance, f),
    transactionSignature: (f = msg.getTransactionSignature()) && org_xrpl_rpc_v1_common_pb.TransactionSignature.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && org_xrpl_rpc_v1_common_pb.Flags.toObject(includeInstance, f),
    lastLedgerSequence: (f = msg.getLastLedgerSequence()) && org_xrpl_rpc_v1_common_pb.LastLedgerSequence.toObject(includeInstance, f),
    sourceTag: (f = msg.getSourceTag()) && org_xrpl_rpc_v1_common_pb.SourceTag.toObject(includeInstance, f),
    memosList: jspb.Message.toObjectList(msg.getMemosList(),
    proto.org.xrpl.rpc.v1.Memo.toObject, includeInstance),
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    proto.org.xrpl.rpc.v1.Signer.toObject, includeInstance),
    accountTransactionId: (f = msg.getAccountTransactionId()) && org_xrpl_rpc_v1_common_pb.AccountTransactionID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Transaction}
 */
proto.org.xrpl.rpc.v1.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Transaction;
  return proto.org.xrpl.rpc.v1.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Transaction}
 */
proto.org.xrpl.rpc.v1.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Account;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Sequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Sequence.deserializeBinaryFromReader);
      msg.setSequence(value);
      break;
    case 4:
      var value = new proto.org.xrpl.rpc.v1.Payment;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Payment.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 13:
      var value = new proto.org.xrpl.rpc.v1.AccountSet;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.AccountSet.deserializeBinaryFromReader);
      msg.setAccountSet(value);
      break;
    case 14:
      var value = new proto.org.xrpl.rpc.v1.AccountDelete;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.AccountDelete.deserializeBinaryFromReader);
      msg.setAccountDelete(value);
      break;
    case 15:
      var value = new proto.org.xrpl.rpc.v1.CheckCancel;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.CheckCancel.deserializeBinaryFromReader);
      msg.setCheckCancel(value);
      break;
    case 16:
      var value = new proto.org.xrpl.rpc.v1.CheckCash;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.CheckCash.deserializeBinaryFromReader);
      msg.setCheckCash(value);
      break;
    case 17:
      var value = new proto.org.xrpl.rpc.v1.CheckCreate;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.CheckCreate.deserializeBinaryFromReader);
      msg.setCheckCreate(value);
      break;
    case 18:
      var value = new proto.org.xrpl.rpc.v1.DepositPreauth;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.DepositPreauth.deserializeBinaryFromReader);
      msg.setDepositPreauth(value);
      break;
    case 19:
      var value = new proto.org.xrpl.rpc.v1.EscrowCancel;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.EscrowCancel.deserializeBinaryFromReader);
      msg.setEscrowCancel(value);
      break;
    case 20:
      var value = new proto.org.xrpl.rpc.v1.EscrowCreate;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.EscrowCreate.deserializeBinaryFromReader);
      msg.setEscrowCreate(value);
      break;
    case 21:
      var value = new proto.org.xrpl.rpc.v1.EscrowFinish;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.EscrowFinish.deserializeBinaryFromReader);
      msg.setEscrowFinish(value);
      break;
    case 22:
      var value = new proto.org.xrpl.rpc.v1.OfferCancel;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.OfferCancel.deserializeBinaryFromReader);
      msg.setOfferCancel(value);
      break;
    case 23:
      var value = new proto.org.xrpl.rpc.v1.OfferCreate;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.OfferCreate.deserializeBinaryFromReader);
      msg.setOfferCreate(value);
      break;
    case 24:
      var value = new proto.org.xrpl.rpc.v1.PaymentChannelClaim;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.PaymentChannelClaim.deserializeBinaryFromReader);
      msg.setPaymentChannelClaim(value);
      break;
    case 25:
      var value = new proto.org.xrpl.rpc.v1.PaymentChannelCreate;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.PaymentChannelCreate.deserializeBinaryFromReader);
      msg.setPaymentChannelCreate(value);
      break;
    case 26:
      var value = new proto.org.xrpl.rpc.v1.PaymentChannelFund;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.PaymentChannelFund.deserializeBinaryFromReader);
      msg.setPaymentChannelFund(value);
      break;
    case 27:
      var value = new proto.org.xrpl.rpc.v1.SetRegularKey;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.SetRegularKey.deserializeBinaryFromReader);
      msg.setSetRegularKey(value);
      break;
    case 28:
      var value = new proto.org.xrpl.rpc.v1.SignerListSet;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.SignerListSet.deserializeBinaryFromReader);
      msg.setSignerListSet(value);
      break;
    case 29:
      var value = new proto.org.xrpl.rpc.v1.TrustSet;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.TrustSet.deserializeBinaryFromReader);
      msg.setTrustSet(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.SigningPublicKey;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SigningPublicKey.deserializeBinaryFromReader);
      msg.setSigningPublicKey(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.TransactionSignature;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TransactionSignature.deserializeBinaryFromReader);
      msg.setTransactionSignature(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.Flags;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Flags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 8:
      var value = new org_xrpl_rpc_v1_common_pb.LastLedgerSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.LastLedgerSequence.deserializeBinaryFromReader);
      msg.setLastLedgerSequence(value);
      break;
    case 9:
      var value = new org_xrpl_rpc_v1_common_pb.SourceTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SourceTag.deserializeBinaryFromReader);
      msg.setSourceTag(value);
      break;
    case 10:
      var value = new proto.org.xrpl.rpc.v1.Memo;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Memo.deserializeBinaryFromReader);
      msg.addMemos(value);
      break;
    case 11:
      var value = new proto.org.xrpl.rpc.v1.Signer;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Signer.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    case 12:
      var value = new org_xrpl_rpc_v1_common_pb.AccountTransactionID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.AccountTransactionID.deserializeBinaryFromReader);
      msg.setAccountTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Sequence.serializeBinaryToWriter
    );
  }
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.org.xrpl.rpc.v1.Payment.serializeBinaryToWriter
    );
  }
  f = message.getAccountSet();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.org.xrpl.rpc.v1.AccountSet.serializeBinaryToWriter
    );
  }
  f = message.getAccountDelete();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.org.xrpl.rpc.v1.AccountDelete.serializeBinaryToWriter
    );
  }
  f = message.getCheckCancel();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.org.xrpl.rpc.v1.CheckCancel.serializeBinaryToWriter
    );
  }
  f = message.getCheckCash();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.org.xrpl.rpc.v1.CheckCash.serializeBinaryToWriter
    );
  }
  f = message.getCheckCreate();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.org.xrpl.rpc.v1.CheckCreate.serializeBinaryToWriter
    );
  }
  f = message.getDepositPreauth();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.org.xrpl.rpc.v1.DepositPreauth.serializeBinaryToWriter
    );
  }
  f = message.getEscrowCancel();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.org.xrpl.rpc.v1.EscrowCancel.serializeBinaryToWriter
    );
  }
  f = message.getEscrowCreate();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.org.xrpl.rpc.v1.EscrowCreate.serializeBinaryToWriter
    );
  }
  f = message.getEscrowFinish();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.org.xrpl.rpc.v1.EscrowFinish.serializeBinaryToWriter
    );
  }
  f = message.getOfferCancel();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.org.xrpl.rpc.v1.OfferCancel.serializeBinaryToWriter
    );
  }
  f = message.getOfferCreate();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.org.xrpl.rpc.v1.OfferCreate.serializeBinaryToWriter
    );
  }
  f = message.getPaymentChannelClaim();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.org.xrpl.rpc.v1.PaymentChannelClaim.serializeBinaryToWriter
    );
  }
  f = message.getPaymentChannelCreate();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.org.xrpl.rpc.v1.PaymentChannelCreate.serializeBinaryToWriter
    );
  }
  f = message.getPaymentChannelFund();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.org.xrpl.rpc.v1.PaymentChannelFund.serializeBinaryToWriter
    );
  }
  f = message.getSetRegularKey();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.org.xrpl.rpc.v1.SetRegularKey.serializeBinaryToWriter
    );
  }
  f = message.getSignerListSet();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.org.xrpl.rpc.v1.SignerListSet.serializeBinaryToWriter
    );
  }
  f = message.getTrustSet();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.org.xrpl.rpc.v1.TrustSet.serializeBinaryToWriter
    );
  }
  f = message.getSigningPublicKey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.SigningPublicKey.serializeBinaryToWriter
    );
  }
  f = message.getTransactionSignature();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.TransactionSignature.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.Flags.serializeBinaryToWriter
    );
  }
  f = message.getLastLedgerSequence();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      org_xrpl_rpc_v1_common_pb.LastLedgerSequence.serializeBinaryToWriter
    );
  }
  f = message.getSourceTag();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      org_xrpl_rpc_v1_common_pb.SourceTag.serializeBinaryToWriter
    );
  }
  f = message.getMemosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.org.xrpl.rpc.v1.Memo.serializeBinaryToWriter
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.org.xrpl.rpc.v1.Signer.serializeBinaryToWriter
    );
  }
  f = message.getAccountTransactionId();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      org_xrpl_rpc_v1_common_pb.AccountTransactionID.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.org.xrpl.rpc.v1.Account}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Account} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Account, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Account|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional XRPDropsAmount fee = 2;
 * @return {?proto.org.xrpl.rpc.v1.XRPDropsAmount}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getFee = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_amount_pb.XRPDropsAmount, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.XRPDropsAmount|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Sequence sequence = 3;
 * @return {?proto.org.xrpl.rpc.v1.Sequence}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Sequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Sequence, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Sequence|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setSequence = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearSequence = function() {
  this.setSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Payment payment = 4;
 * @return {?proto.org.xrpl.rpc.v1.Payment}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getPayment = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Payment} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.Payment, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.Payment|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setPayment = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearPayment = function() {
  this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AccountSet account_set = 13;
 * @return {?proto.org.xrpl.rpc.v1.AccountSet}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getAccountSet = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.AccountSet} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.AccountSet, 13));
};


/** @param {?proto.org.xrpl.rpc.v1.AccountSet|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setAccountSet = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearAccountSet = function() {
  this.setAccountSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasAccountSet = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional AccountDelete account_delete = 14;
 * @return {?proto.org.xrpl.rpc.v1.AccountDelete}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getAccountDelete = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.AccountDelete} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.AccountDelete, 14));
};


/** @param {?proto.org.xrpl.rpc.v1.AccountDelete|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setAccountDelete = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearAccountDelete = function() {
  this.setAccountDelete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasAccountDelete = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional CheckCancel check_cancel = 15;
 * @return {?proto.org.xrpl.rpc.v1.CheckCancel}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getCheckCancel = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CheckCancel} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.CheckCancel, 15));
};


/** @param {?proto.org.xrpl.rpc.v1.CheckCancel|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setCheckCancel = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearCheckCancel = function() {
  this.setCheckCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasCheckCancel = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional CheckCash check_cash = 16;
 * @return {?proto.org.xrpl.rpc.v1.CheckCash}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getCheckCash = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CheckCash} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.CheckCash, 16));
};


/** @param {?proto.org.xrpl.rpc.v1.CheckCash|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setCheckCash = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearCheckCash = function() {
  this.setCheckCash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasCheckCash = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional CheckCreate check_create = 17;
 * @return {?proto.org.xrpl.rpc.v1.CheckCreate}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getCheckCreate = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CheckCreate} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.CheckCreate, 17));
};


/** @param {?proto.org.xrpl.rpc.v1.CheckCreate|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setCheckCreate = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearCheckCreate = function() {
  this.setCheckCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasCheckCreate = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional DepositPreauth deposit_preauth = 18;
 * @return {?proto.org.xrpl.rpc.v1.DepositPreauth}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getDepositPreauth = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DepositPreauth} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.DepositPreauth, 18));
};


/** @param {?proto.org.xrpl.rpc.v1.DepositPreauth|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setDepositPreauth = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearDepositPreauth = function() {
  this.setDepositPreauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasDepositPreauth = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional EscrowCancel escrow_cancel = 19;
 * @return {?proto.org.xrpl.rpc.v1.EscrowCancel}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getEscrowCancel = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.EscrowCancel} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.EscrowCancel, 19));
};


/** @param {?proto.org.xrpl.rpc.v1.EscrowCancel|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setEscrowCancel = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearEscrowCancel = function() {
  this.setEscrowCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasEscrowCancel = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional EscrowCreate escrow_create = 20;
 * @return {?proto.org.xrpl.rpc.v1.EscrowCreate}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getEscrowCreate = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.EscrowCreate} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.EscrowCreate, 20));
};


/** @param {?proto.org.xrpl.rpc.v1.EscrowCreate|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setEscrowCreate = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearEscrowCreate = function() {
  this.setEscrowCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasEscrowCreate = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional EscrowFinish escrow_finish = 21;
 * @return {?proto.org.xrpl.rpc.v1.EscrowFinish}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getEscrowFinish = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.EscrowFinish} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.EscrowFinish, 21));
};


/** @param {?proto.org.xrpl.rpc.v1.EscrowFinish|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setEscrowFinish = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearEscrowFinish = function() {
  this.setEscrowFinish(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasEscrowFinish = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional OfferCancel offer_cancel = 22;
 * @return {?proto.org.xrpl.rpc.v1.OfferCancel}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getOfferCancel = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OfferCancel} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.OfferCancel, 22));
};


/** @param {?proto.org.xrpl.rpc.v1.OfferCancel|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setOfferCancel = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearOfferCancel = function() {
  this.setOfferCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasOfferCancel = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional OfferCreate offer_create = 23;
 * @return {?proto.org.xrpl.rpc.v1.OfferCreate}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getOfferCreate = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OfferCreate} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.OfferCreate, 23));
};


/** @param {?proto.org.xrpl.rpc.v1.OfferCreate|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setOfferCreate = function(value) {
  jspb.Message.setOneofWrapperField(this, 23, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearOfferCreate = function() {
  this.setOfferCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasOfferCreate = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional PaymentChannelClaim payment_channel_claim = 24;
 * @return {?proto.org.xrpl.rpc.v1.PaymentChannelClaim}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getPaymentChannelClaim = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PaymentChannelClaim} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.PaymentChannelClaim, 24));
};


/** @param {?proto.org.xrpl.rpc.v1.PaymentChannelClaim|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setPaymentChannelClaim = function(value) {
  jspb.Message.setOneofWrapperField(this, 24, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearPaymentChannelClaim = function() {
  this.setPaymentChannelClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasPaymentChannelClaim = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional PaymentChannelCreate payment_channel_create = 25;
 * @return {?proto.org.xrpl.rpc.v1.PaymentChannelCreate}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getPaymentChannelCreate = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PaymentChannelCreate} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.PaymentChannelCreate, 25));
};


/** @param {?proto.org.xrpl.rpc.v1.PaymentChannelCreate|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setPaymentChannelCreate = function(value) {
  jspb.Message.setOneofWrapperField(this, 25, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearPaymentChannelCreate = function() {
  this.setPaymentChannelCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasPaymentChannelCreate = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional PaymentChannelFund payment_channel_fund = 26;
 * @return {?proto.org.xrpl.rpc.v1.PaymentChannelFund}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getPaymentChannelFund = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PaymentChannelFund} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.PaymentChannelFund, 26));
};


/** @param {?proto.org.xrpl.rpc.v1.PaymentChannelFund|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setPaymentChannelFund = function(value) {
  jspb.Message.setOneofWrapperField(this, 26, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearPaymentChannelFund = function() {
  this.setPaymentChannelFund(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasPaymentChannelFund = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional SetRegularKey set_regular_key = 27;
 * @return {?proto.org.xrpl.rpc.v1.SetRegularKey}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getSetRegularKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SetRegularKey} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.SetRegularKey, 27));
};


/** @param {?proto.org.xrpl.rpc.v1.SetRegularKey|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setSetRegularKey = function(value) {
  jspb.Message.setOneofWrapperField(this, 27, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearSetRegularKey = function() {
  this.setSetRegularKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasSetRegularKey = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional SignerListSet signer_list_set = 28;
 * @return {?proto.org.xrpl.rpc.v1.SignerListSet}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getSignerListSet = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SignerListSet} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.SignerListSet, 28));
};


/** @param {?proto.org.xrpl.rpc.v1.SignerListSet|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setSignerListSet = function(value) {
  jspb.Message.setOneofWrapperField(this, 28, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearSignerListSet = function() {
  this.setSignerListSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasSignerListSet = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional TrustSet trust_set = 29;
 * @return {?proto.org.xrpl.rpc.v1.TrustSet}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getTrustSet = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TrustSet} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.TrustSet, 29));
};


/** @param {?proto.org.xrpl.rpc.v1.TrustSet|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setTrustSet = function(value) {
  jspb.Message.setOneofWrapperField(this, 29, proto.org.xrpl.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearTrustSet = function() {
  this.setTrustSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasTrustSet = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional SigningPublicKey signing_public_key = 5;
 * @return {?proto.org.xrpl.rpc.v1.SigningPublicKey}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getSigningPublicKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SigningPublicKey} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SigningPublicKey, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.SigningPublicKey|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setSigningPublicKey = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearSigningPublicKey = function() {
  this.setSigningPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasSigningPublicKey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TransactionSignature transaction_signature = 6;
 * @return {?proto.org.xrpl.rpc.v1.TransactionSignature}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getTransactionSignature = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TransactionSignature} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TransactionSignature, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.TransactionSignature|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setTransactionSignature = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearTransactionSignature = function() {
  this.setTransactionSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasTransactionSignature = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Flags flags = 7;
 * @return {?proto.org.xrpl.rpc.v1.Flags}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getFlags = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Flags} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Flags, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.Flags|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional LastLedgerSequence last_ledger_sequence = 8;
 * @return {?proto.org.xrpl.rpc.v1.LastLedgerSequence}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getLastLedgerSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LastLedgerSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.LastLedgerSequence, 8));
};


/** @param {?proto.org.xrpl.rpc.v1.LastLedgerSequence|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setLastLedgerSequence = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearLastLedgerSequence = function() {
  this.setLastLedgerSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasLastLedgerSequence = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SourceTag source_tag = 9;
 * @return {?proto.org.xrpl.rpc.v1.SourceTag}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getSourceTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SourceTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SourceTag, 9));
};


/** @param {?proto.org.xrpl.rpc.v1.SourceTag|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setSourceTag = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearSourceTag = function() {
  this.setSourceTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasSourceTag = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated Memo memos = 10;
 * @return {!Array<!proto.org.xrpl.rpc.v1.Memo>}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getMemosList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.Memo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.xrpl.rpc.v1.Memo, 10));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.Memo>} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setMemosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.Memo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.Memo}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.addMemos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.org.xrpl.rpc.v1.Memo, opt_index);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearMemosList = function() {
  this.setMemosList([]);
};


/**
 * repeated Signer signers = 11;
 * @return {!Array<!proto.org.xrpl.rpc.v1.Signer>}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getSignersList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.xrpl.rpc.v1.Signer, 11));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.Signer>} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setSignersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.Signer}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.org.xrpl.rpc.v1.Signer, opt_index);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearSignersList = function() {
  this.setSignersList([]);
};


/**
 * optional AccountTransactionID account_transaction_id = 12;
 * @return {?proto.org.xrpl.rpc.v1.AccountTransactionID}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.getAccountTransactionId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.AccountTransactionID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.AccountTransactionID, 12));
};


/** @param {?proto.org.xrpl.rpc.v1.AccountTransactionID|undefined} value */
proto.org.xrpl.rpc.v1.Transaction.prototype.setAccountTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.org.xrpl.rpc.v1.Transaction.prototype.clearAccountTransactionId = function() {
  this.setAccountTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Transaction.prototype.hasAccountTransactionId = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Memo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Memo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Memo.displayName = 'proto.org.xrpl.rpc.v1.Memo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Memo.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Memo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Memo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Memo.toObject = function(includeInstance, msg) {
  var f, obj = {
    memoData: (f = msg.getMemoData()) && org_xrpl_rpc_v1_common_pb.MemoData.toObject(includeInstance, f),
    memoFormat: (f = msg.getMemoFormat()) && org_xrpl_rpc_v1_common_pb.MemoFormat.toObject(includeInstance, f),
    memoType: (f = msg.getMemoType()) && org_xrpl_rpc_v1_common_pb.MemoType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Memo}
 */
proto.org.xrpl.rpc.v1.Memo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Memo;
  return proto.org.xrpl.rpc.v1.Memo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Memo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Memo}
 */
proto.org.xrpl.rpc.v1.Memo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.MemoData;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.MemoData.deserializeBinaryFromReader);
      msg.setMemoData(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.MemoFormat;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.MemoFormat.deserializeBinaryFromReader);
      msg.setMemoFormat(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.MemoType;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.MemoType.deserializeBinaryFromReader);
      msg.setMemoType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Memo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Memo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Memo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Memo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemoData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.MemoData.serializeBinaryToWriter
    );
  }
  f = message.getMemoFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.MemoFormat.serializeBinaryToWriter
    );
  }
  f = message.getMemoType();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.MemoType.serializeBinaryToWriter
    );
  }
};


/**
 * optional MemoData memo_data = 1;
 * @return {?proto.org.xrpl.rpc.v1.MemoData}
 */
proto.org.xrpl.rpc.v1.Memo.prototype.getMemoData = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.MemoData} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.MemoData, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.MemoData|undefined} value */
proto.org.xrpl.rpc.v1.Memo.prototype.setMemoData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Memo.prototype.clearMemoData = function() {
  this.setMemoData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Memo.prototype.hasMemoData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MemoFormat memo_format = 2;
 * @return {?proto.org.xrpl.rpc.v1.MemoFormat}
 */
proto.org.xrpl.rpc.v1.Memo.prototype.getMemoFormat = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.MemoFormat} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.MemoFormat, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.MemoFormat|undefined} value */
proto.org.xrpl.rpc.v1.Memo.prototype.setMemoFormat = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Memo.prototype.clearMemoFormat = function() {
  this.setMemoFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Memo.prototype.hasMemoFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MemoType memo_type = 3;
 * @return {?proto.org.xrpl.rpc.v1.MemoType}
 */
proto.org.xrpl.rpc.v1.Memo.prototype.getMemoType = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.MemoType} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.MemoType, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.MemoType|undefined} value */
proto.org.xrpl.rpc.v1.Memo.prototype.setMemoType = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Memo.prototype.clearMemoType = function() {
  this.setMemoType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Memo.prototype.hasMemoType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Signer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Signer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Signer.displayName = 'proto.org.xrpl.rpc.v1.Signer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Signer.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Signer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Signer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Signer.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_common_pb.Account.toObject(includeInstance, f),
    transactionSignature: (f = msg.getTransactionSignature()) && org_xrpl_rpc_v1_common_pb.TransactionSignature.toObject(includeInstance, f),
    signingPublicKey: (f = msg.getSigningPublicKey()) && org_xrpl_rpc_v1_common_pb.SigningPublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Signer}
 */
proto.org.xrpl.rpc.v1.Signer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Signer;
  return proto.org.xrpl.rpc.v1.Signer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Signer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Signer}
 */
proto.org.xrpl.rpc.v1.Signer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Account;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.TransactionSignature;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TransactionSignature.deserializeBinaryFromReader);
      msg.setTransactionSignature(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.SigningPublicKey;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SigningPublicKey.deserializeBinaryFromReader);
      msg.setSigningPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Signer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Signer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Signer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Signer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getTransactionSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.TransactionSignature.serializeBinaryToWriter
    );
  }
  f = message.getSigningPublicKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.SigningPublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.org.xrpl.rpc.v1.Account}
 */
proto.org.xrpl.rpc.v1.Signer.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Account} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Account, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Account|undefined} value */
proto.org.xrpl.rpc.v1.Signer.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Signer.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Signer.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionSignature transaction_signature = 2;
 * @return {?proto.org.xrpl.rpc.v1.TransactionSignature}
 */
proto.org.xrpl.rpc.v1.Signer.prototype.getTransactionSignature = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TransactionSignature} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TransactionSignature, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.TransactionSignature|undefined} value */
proto.org.xrpl.rpc.v1.Signer.prototype.setTransactionSignature = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Signer.prototype.clearTransactionSignature = function() {
  this.setTransactionSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Signer.prototype.hasTransactionSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SigningPublicKey signing_public_key = 3;
 * @return {?proto.org.xrpl.rpc.v1.SigningPublicKey}
 */
proto.org.xrpl.rpc.v1.Signer.prototype.getSigningPublicKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SigningPublicKey} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SigningPublicKey, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.SigningPublicKey|undefined} value */
proto.org.xrpl.rpc.v1.Signer.prototype.setSigningPublicKey = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Signer.prototype.clearSigningPublicKey = function() {
  this.setSigningPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Signer.prototype.hasSigningPublicKey = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.AccountSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.AccountSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.AccountSet.displayName = 'proto.org.xrpl.rpc.v1.AccountSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.AccountSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.AccountSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.AccountSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    clearFlag: (f = msg.getClearFlag()) && org_xrpl_rpc_v1_common_pb.ClearFlag.toObject(includeInstance, f),
    domain: (f = msg.getDomain()) && org_xrpl_rpc_v1_common_pb.Domain.toObject(includeInstance, f),
    emailHash: (f = msg.getEmailHash()) && org_xrpl_rpc_v1_common_pb.EmailHash.toObject(includeInstance, f),
    messageKey: (f = msg.getMessageKey()) && org_xrpl_rpc_v1_common_pb.MessageKey.toObject(includeInstance, f),
    setFlag: (f = msg.getSetFlag()) && org_xrpl_rpc_v1_common_pb.SetFlag.toObject(includeInstance, f),
    transferRate: (f = msg.getTransferRate()) && org_xrpl_rpc_v1_common_pb.TransferRate.toObject(includeInstance, f),
    tickSize: (f = msg.getTickSize()) && org_xrpl_rpc_v1_common_pb.TickSize.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.AccountSet}
 */
proto.org.xrpl.rpc.v1.AccountSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.AccountSet;
  return proto.org.xrpl.rpc.v1.AccountSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.AccountSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.AccountSet}
 */
proto.org.xrpl.rpc.v1.AccountSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.ClearFlag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.ClearFlag.deserializeBinaryFromReader);
      msg.setClearFlag(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Domain;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Domain.deserializeBinaryFromReader);
      msg.setDomain(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.EmailHash;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.EmailHash.deserializeBinaryFromReader);
      msg.setEmailHash(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.MessageKey;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.MessageKey.deserializeBinaryFromReader);
      msg.setMessageKey(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.SetFlag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SetFlag.deserializeBinaryFromReader);
      msg.setSetFlag(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.TransferRate;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TransferRate.deserializeBinaryFromReader);
      msg.setTransferRate(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.TickSize;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TickSize.deserializeBinaryFromReader);
      msg.setTickSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.AccountSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.AccountSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.AccountSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClearFlag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.ClearFlag.serializeBinaryToWriter
    );
  }
  f = message.getDomain();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Domain.serializeBinaryToWriter
    );
  }
  f = message.getEmailHash();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.EmailHash.serializeBinaryToWriter
    );
  }
  f = message.getMessageKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.MessageKey.serializeBinaryToWriter
    );
  }
  f = message.getSetFlag();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.SetFlag.serializeBinaryToWriter
    );
  }
  f = message.getTransferRate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.TransferRate.serializeBinaryToWriter
    );
  }
  f = message.getTickSize();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.TickSize.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClearFlag clear_flag = 1;
 * @return {?proto.org.xrpl.rpc.v1.ClearFlag}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.getClearFlag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.ClearFlag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.ClearFlag, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.ClearFlag|undefined} value */
proto.org.xrpl.rpc.v1.AccountSet.prototype.setClearFlag = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.AccountSet.prototype.clearClearFlag = function() {
  this.setClearFlag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.hasClearFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Domain domain = 2;
 * @return {?proto.org.xrpl.rpc.v1.Domain}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.getDomain = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Domain} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Domain, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Domain|undefined} value */
proto.org.xrpl.rpc.v1.AccountSet.prototype.setDomain = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.AccountSet.prototype.clearDomain = function() {
  this.setDomain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.hasDomain = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EmailHash email_hash = 3;
 * @return {?proto.org.xrpl.rpc.v1.EmailHash}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.getEmailHash = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.EmailHash} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.EmailHash, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.EmailHash|undefined} value */
proto.org.xrpl.rpc.v1.AccountSet.prototype.setEmailHash = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.AccountSet.prototype.clearEmailHash = function() {
  this.setEmailHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.hasEmailHash = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MessageKey message_key = 4;
 * @return {?proto.org.xrpl.rpc.v1.MessageKey}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.getMessageKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.MessageKey} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.MessageKey, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.MessageKey|undefined} value */
proto.org.xrpl.rpc.v1.AccountSet.prototype.setMessageKey = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.AccountSet.prototype.clearMessageKey = function() {
  this.setMessageKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.hasMessageKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SetFlag set_flag = 5;
 * @return {?proto.org.xrpl.rpc.v1.SetFlag}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.getSetFlag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SetFlag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SetFlag, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.SetFlag|undefined} value */
proto.org.xrpl.rpc.v1.AccountSet.prototype.setSetFlag = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.AccountSet.prototype.clearSetFlag = function() {
  this.setSetFlag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.hasSetFlag = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TransferRate transfer_rate = 6;
 * @return {?proto.org.xrpl.rpc.v1.TransferRate}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.getTransferRate = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TransferRate} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TransferRate, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.TransferRate|undefined} value */
proto.org.xrpl.rpc.v1.AccountSet.prototype.setTransferRate = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.AccountSet.prototype.clearTransferRate = function() {
  this.setTransferRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.hasTransferRate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TickSize tick_size = 7;
 * @return {?proto.org.xrpl.rpc.v1.TickSize}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.getTickSize = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TickSize} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TickSize, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.TickSize|undefined} value */
proto.org.xrpl.rpc.v1.AccountSet.prototype.setTickSize = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.AccountSet.prototype.clearTickSize = function() {
  this.setTickSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountSet.prototype.hasTickSize = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.AccountDelete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.AccountDelete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.AccountDelete.displayName = 'proto.org.xrpl.rpc.v1.AccountDelete';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.AccountDelete.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.AccountDelete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.AccountDelete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.AccountDelete.toObject = function(includeInstance, msg) {
  var f, obj = {
    destination: (f = msg.getDestination()) && org_xrpl_rpc_v1_common_pb.Destination.toObject(includeInstance, f),
    destinationTag: (f = msg.getDestinationTag()) && org_xrpl_rpc_v1_common_pb.DestinationTag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.AccountDelete}
 */
proto.org.xrpl.rpc.v1.AccountDelete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.AccountDelete;
  return proto.org.xrpl.rpc.v1.AccountDelete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.AccountDelete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.AccountDelete}
 */
proto.org.xrpl.rpc.v1.AccountDelete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Destination;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationTag.deserializeBinaryFromReader);
      msg.setDestinationTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.AccountDelete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.AccountDelete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.AccountDelete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.AccountDelete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Destination.serializeBinaryToWriter
    );
  }
  f = message.getDestinationTag();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional Destination destination = 1;
 * @return {?proto.org.xrpl.rpc.v1.Destination}
 */
proto.org.xrpl.rpc.v1.AccountDelete.prototype.getDestination = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Destination} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Destination, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Destination|undefined} value */
proto.org.xrpl.rpc.v1.AccountDelete.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.AccountDelete.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountDelete.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DestinationTag destination_tag = 2;
 * @return {?proto.org.xrpl.rpc.v1.DestinationTag}
 */
proto.org.xrpl.rpc.v1.AccountDelete.prototype.getDestinationTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationTag, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationTag|undefined} value */
proto.org.xrpl.rpc.v1.AccountDelete.prototype.setDestinationTag = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.AccountDelete.prototype.clearDestinationTag = function() {
  this.setDestinationTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.AccountDelete.prototype.hasDestinationTag = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.CheckCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.CheckCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.CheckCancel.displayName = 'proto.org.xrpl.rpc.v1.CheckCancel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.CheckCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.CheckCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.CheckCancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.CheckCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    checkId: (f = msg.getCheckId()) && org_xrpl_rpc_v1_common_pb.CheckID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.CheckCancel}
 */
proto.org.xrpl.rpc.v1.CheckCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.CheckCancel;
  return proto.org.xrpl.rpc.v1.CheckCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.CheckCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.CheckCancel}
 */
proto.org.xrpl.rpc.v1.CheckCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.CheckID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.CheckID.deserializeBinaryFromReader);
      msg.setCheckId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.CheckCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.CheckCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.CheckCancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.CheckCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCheckId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.CheckID.serializeBinaryToWriter
    );
  }
};


/**
 * optional CheckID check_id = 1;
 * @return {?proto.org.xrpl.rpc.v1.CheckID}
 */
proto.org.xrpl.rpc.v1.CheckCancel.prototype.getCheckId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CheckID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.CheckID, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.CheckID|undefined} value */
proto.org.xrpl.rpc.v1.CheckCancel.prototype.setCheckId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.CheckCancel.prototype.clearCheckId = function() {
  this.setCheckId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CheckCancel.prototype.hasCheckId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.CheckCash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.xrpl.rpc.v1.CheckCash.oneofGroups_);
};
goog.inherits(proto.org.xrpl.rpc.v1.CheckCash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.CheckCash.displayName = 'proto.org.xrpl.rpc.v1.CheckCash';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.xrpl.rpc.v1.CheckCash.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.CheckCash.AmountOneofCase = {
  AMOUNT_ONEOF_NOT_SET: 0,
  AMOUNT: 2,
  DELIVER_MIN: 3
};

/**
 * @return {proto.org.xrpl.rpc.v1.CheckCash.AmountOneofCase}
 */
proto.org.xrpl.rpc.v1.CheckCash.prototype.getAmountOneofCase = function() {
  return /** @type {proto.org.xrpl.rpc.v1.CheckCash.AmountOneofCase} */(jspb.Message.computeOneofCase(this, proto.org.xrpl.rpc.v1.CheckCash.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.CheckCash.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.CheckCash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.CheckCash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.CheckCash.toObject = function(includeInstance, msg) {
  var f, obj = {
    checkId: (f = msg.getCheckId()) && org_xrpl_rpc_v1_common_pb.CheckID.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && org_xrpl_rpc_v1_common_pb.Amount.toObject(includeInstance, f),
    deliverMin: (f = msg.getDeliverMin()) && org_xrpl_rpc_v1_common_pb.DeliverMin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.CheckCash}
 */
proto.org.xrpl.rpc.v1.CheckCash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.CheckCash;
  return proto.org.xrpl.rpc.v1.CheckCash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.CheckCash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.CheckCash}
 */
proto.org.xrpl.rpc.v1.CheckCash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.CheckID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.CheckID.deserializeBinaryFromReader);
      msg.setCheckId(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Amount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.DeliverMin;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DeliverMin.deserializeBinaryFromReader);
      msg.setDeliverMin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.CheckCash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.CheckCash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.CheckCash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.CheckCash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCheckId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.CheckID.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDeliverMin();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.DeliverMin.serializeBinaryToWriter
    );
  }
};


/**
 * optional CheckID check_id = 1;
 * @return {?proto.org.xrpl.rpc.v1.CheckID}
 */
proto.org.xrpl.rpc.v1.CheckCash.prototype.getCheckId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CheckID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.CheckID, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.CheckID|undefined} value */
proto.org.xrpl.rpc.v1.CheckCash.prototype.setCheckId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.CheckCash.prototype.clearCheckId = function() {
  this.setCheckId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CheckCash.prototype.hasCheckId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Amount amount = 2;
 * @return {?proto.org.xrpl.rpc.v1.Amount}
 */
proto.org.xrpl.rpc.v1.CheckCash.prototype.getAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Amount, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Amount|undefined} value */
proto.org.xrpl.rpc.v1.CheckCash.prototype.setAmount = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.org.xrpl.rpc.v1.CheckCash.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.CheckCash.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CheckCash.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeliverMin deliver_min = 3;
 * @return {?proto.org.xrpl.rpc.v1.DeliverMin}
 */
proto.org.xrpl.rpc.v1.CheckCash.prototype.getDeliverMin = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DeliverMin} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DeliverMin, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.DeliverMin|undefined} value */
proto.org.xrpl.rpc.v1.CheckCash.prototype.setDeliverMin = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.org.xrpl.rpc.v1.CheckCash.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.CheckCash.prototype.clearDeliverMin = function() {
  this.setDeliverMin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CheckCash.prototype.hasDeliverMin = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.CheckCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.CheckCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.CheckCreate.displayName = 'proto.org.xrpl.rpc.v1.CheckCreate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.CheckCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.CheckCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.CheckCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    destination: (f = msg.getDestination()) && org_xrpl_rpc_v1_common_pb.Destination.toObject(includeInstance, f),
    sendMax: (f = msg.getSendMax()) && org_xrpl_rpc_v1_common_pb.SendMax.toObject(includeInstance, f),
    destinationTag: (f = msg.getDestinationTag()) && org_xrpl_rpc_v1_common_pb.DestinationTag.toObject(includeInstance, f),
    expiration: (f = msg.getExpiration()) && org_xrpl_rpc_v1_common_pb.Expiration.toObject(includeInstance, f),
    invoiceId: (f = msg.getInvoiceId()) && org_xrpl_rpc_v1_common_pb.InvoiceID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.CheckCreate}
 */
proto.org.xrpl.rpc.v1.CheckCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.CheckCreate;
  return proto.org.xrpl.rpc.v1.CheckCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.CheckCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.CheckCreate}
 */
proto.org.xrpl.rpc.v1.CheckCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Destination;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.SendMax;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SendMax.deserializeBinaryFromReader);
      msg.setSendMax(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationTag.deserializeBinaryFromReader);
      msg.setDestinationTag(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.Expiration;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Expiration.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.InvoiceID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.InvoiceID.deserializeBinaryFromReader);
      msg.setInvoiceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.CheckCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.CheckCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.CheckCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Destination.serializeBinaryToWriter
    );
  }
  f = message.getSendMax();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.SendMax.serializeBinaryToWriter
    );
  }
  f = message.getDestinationTag();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationTag.serializeBinaryToWriter
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.Expiration.serializeBinaryToWriter
    );
  }
  f = message.getInvoiceId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.InvoiceID.serializeBinaryToWriter
    );
  }
};


/**
 * optional Destination destination = 1;
 * @return {?proto.org.xrpl.rpc.v1.Destination}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.getDestination = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Destination} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Destination, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Destination|undefined} value */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.CheckCreate.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SendMax send_max = 2;
 * @return {?proto.org.xrpl.rpc.v1.SendMax}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.getSendMax = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SendMax} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SendMax, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.SendMax|undefined} value */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.setSendMax = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.CheckCreate.prototype.clearSendMax = function() {
  this.setSendMax(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.hasSendMax = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DestinationTag destination_tag = 3;
 * @return {?proto.org.xrpl.rpc.v1.DestinationTag}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.getDestinationTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationTag, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationTag|undefined} value */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.setDestinationTag = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.CheckCreate.prototype.clearDestinationTag = function() {
  this.setDestinationTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.hasDestinationTag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Expiration expiration = 4;
 * @return {?proto.org.xrpl.rpc.v1.Expiration}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.getExpiration = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Expiration} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Expiration, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.Expiration|undefined} value */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.CheckCreate.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InvoiceID invoice_id = 5;
 * @return {?proto.org.xrpl.rpc.v1.InvoiceID}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.getInvoiceId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.InvoiceID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.InvoiceID, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.InvoiceID|undefined} value */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.setInvoiceId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.CheckCreate.prototype.clearInvoiceId = function() {
  this.setInvoiceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.CheckCreate.prototype.hasInvoiceId = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.DepositPreauth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.xrpl.rpc.v1.DepositPreauth.oneofGroups_);
};
goog.inherits(proto.org.xrpl.rpc.v1.DepositPreauth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.DepositPreauth.displayName = 'proto.org.xrpl.rpc.v1.DepositPreauth';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.xrpl.rpc.v1.DepositPreauth.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.AuthorizationOneofCase = {
  AUTHORIZATION_ONEOF_NOT_SET: 0,
  AUTHORIZE: 1,
  UNAUTHORIZE: 2
};

/**
 * @return {proto.org.xrpl.rpc.v1.DepositPreauth.AuthorizationOneofCase}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.prototype.getAuthorizationOneofCase = function() {
  return /** @type {proto.org.xrpl.rpc.v1.DepositPreauth.AuthorizationOneofCase} */(jspb.Message.computeOneofCase(this, proto.org.xrpl.rpc.v1.DepositPreauth.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.DepositPreauth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.DepositPreauth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.DepositPreauth.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorize: (f = msg.getAuthorize()) && org_xrpl_rpc_v1_common_pb.Authorize.toObject(includeInstance, f),
    unauthorize: (f = msg.getUnauthorize()) && org_xrpl_rpc_v1_common_pb.Unauthorize.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.DepositPreauth}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.DepositPreauth;
  return proto.org.xrpl.rpc.v1.DepositPreauth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.DepositPreauth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.DepositPreauth}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Authorize;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Authorize.deserializeBinaryFromReader);
      msg.setAuthorize(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Unauthorize;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Unauthorize.deserializeBinaryFromReader);
      msg.setUnauthorize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.DepositPreauth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.DepositPreauth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.DepositPreauth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorize();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Authorize.serializeBinaryToWriter
    );
  }
  f = message.getUnauthorize();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Unauthorize.serializeBinaryToWriter
    );
  }
};


/**
 * optional Authorize authorize = 1;
 * @return {?proto.org.xrpl.rpc.v1.Authorize}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.prototype.getAuthorize = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Authorize} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Authorize, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Authorize|undefined} value */
proto.org.xrpl.rpc.v1.DepositPreauth.prototype.setAuthorize = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.org.xrpl.rpc.v1.DepositPreauth.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.DepositPreauth.prototype.clearAuthorize = function() {
  this.setAuthorize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.prototype.hasAuthorize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Unauthorize unauthorize = 2;
 * @return {?proto.org.xrpl.rpc.v1.Unauthorize}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.prototype.getUnauthorize = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Unauthorize} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Unauthorize, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Unauthorize|undefined} value */
proto.org.xrpl.rpc.v1.DepositPreauth.prototype.setUnauthorize = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.org.xrpl.rpc.v1.DepositPreauth.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.DepositPreauth.prototype.clearUnauthorize = function() {
  this.setUnauthorize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.DepositPreauth.prototype.hasUnauthorize = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.EscrowCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.EscrowCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.EscrowCancel.displayName = 'proto.org.xrpl.rpc.v1.EscrowCancel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.EscrowCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.EscrowCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.EscrowCancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.EscrowCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && org_xrpl_rpc_v1_common_pb.Owner.toObject(includeInstance, f),
    offerSequence: (f = msg.getOfferSequence()) && org_xrpl_rpc_v1_common_pb.OfferSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.EscrowCancel}
 */
proto.org.xrpl.rpc.v1.EscrowCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.EscrowCancel;
  return proto.org.xrpl.rpc.v1.EscrowCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.EscrowCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.EscrowCancel}
 */
proto.org.xrpl.rpc.v1.EscrowCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Owner;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Owner.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.OfferSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OfferSequence.deserializeBinaryFromReader);
      msg.setOfferSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.EscrowCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.EscrowCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.EscrowCancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.EscrowCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Owner.serializeBinaryToWriter
    );
  }
  f = message.getOfferSequence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.OfferSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional Owner owner = 1;
 * @return {?proto.org.xrpl.rpc.v1.Owner}
 */
proto.org.xrpl.rpc.v1.EscrowCancel.prototype.getOwner = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Owner} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Owner, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Owner|undefined} value */
proto.org.xrpl.rpc.v1.EscrowCancel.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.EscrowCancel.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowCancel.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OfferSequence offer_sequence = 2;
 * @return {?proto.org.xrpl.rpc.v1.OfferSequence}
 */
proto.org.xrpl.rpc.v1.EscrowCancel.prototype.getOfferSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OfferSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OfferSequence, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.OfferSequence|undefined} value */
proto.org.xrpl.rpc.v1.EscrowCancel.prototype.setOfferSequence = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.EscrowCancel.prototype.clearOfferSequence = function() {
  this.setOfferSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowCancel.prototype.hasOfferSequence = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.EscrowCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.EscrowCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.EscrowCreate.displayName = 'proto.org.xrpl.rpc.v1.EscrowCreate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.EscrowCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.EscrowCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.EscrowCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && org_xrpl_rpc_v1_common_pb.Amount.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && org_xrpl_rpc_v1_common_pb.Destination.toObject(includeInstance, f),
    cancelAfter: (f = msg.getCancelAfter()) && org_xrpl_rpc_v1_common_pb.CancelAfter.toObject(includeInstance, f),
    finishAfter: (f = msg.getFinishAfter()) && org_xrpl_rpc_v1_common_pb.FinishAfter.toObject(includeInstance, f),
    condition: (f = msg.getCondition()) && org_xrpl_rpc_v1_common_pb.Condition.toObject(includeInstance, f),
    destinationTag: (f = msg.getDestinationTag()) && org_xrpl_rpc_v1_common_pb.DestinationTag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.EscrowCreate}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.EscrowCreate;
  return proto.org.xrpl.rpc.v1.EscrowCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.EscrowCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.EscrowCreate}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Amount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Destination;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.CancelAfter;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.CancelAfter.deserializeBinaryFromReader);
      msg.setCancelAfter(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.FinishAfter;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.FinishAfter.deserializeBinaryFromReader);
      msg.setFinishAfter(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.Condition;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Condition.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationTag.deserializeBinaryFromReader);
      msg.setDestinationTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.EscrowCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.EscrowCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.EscrowCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Destination.serializeBinaryToWriter
    );
  }
  f = message.getCancelAfter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.CancelAfter.serializeBinaryToWriter
    );
  }
  f = message.getFinishAfter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.FinishAfter.serializeBinaryToWriter
    );
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.Condition.serializeBinaryToWriter
    );
  }
  f = message.getDestinationTag();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional Amount amount = 1;
 * @return {?proto.org.xrpl.rpc.v1.Amount}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.getAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Amount, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Amount|undefined} value */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.EscrowCreate.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Destination destination = 2;
 * @return {?proto.org.xrpl.rpc.v1.Destination}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.getDestination = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Destination} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Destination, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Destination|undefined} value */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.EscrowCreate.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CancelAfter cancel_after = 3;
 * @return {?proto.org.xrpl.rpc.v1.CancelAfter}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.getCancelAfter = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CancelAfter} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.CancelAfter, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.CancelAfter|undefined} value */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.setCancelAfter = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.EscrowCreate.prototype.clearCancelAfter = function() {
  this.setCancelAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.hasCancelAfter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FinishAfter finish_after = 4;
 * @return {?proto.org.xrpl.rpc.v1.FinishAfter}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.getFinishAfter = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.FinishAfter} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.FinishAfter, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.FinishAfter|undefined} value */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.setFinishAfter = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.EscrowCreate.prototype.clearFinishAfter = function() {
  this.setFinishAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.hasFinishAfter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Condition condition = 5;
 * @return {?proto.org.xrpl.rpc.v1.Condition}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.getCondition = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Condition} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Condition, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.Condition|undefined} value */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.setCondition = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.EscrowCreate.prototype.clearCondition = function() {
  this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DestinationTag destination_tag = 6;
 * @return {?proto.org.xrpl.rpc.v1.DestinationTag}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.getDestinationTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationTag, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationTag|undefined} value */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.setDestinationTag = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.EscrowCreate.prototype.clearDestinationTag = function() {
  this.setDestinationTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowCreate.prototype.hasDestinationTag = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.EscrowFinish = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.EscrowFinish, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.EscrowFinish.displayName = 'proto.org.xrpl.rpc.v1.EscrowFinish';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.EscrowFinish.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.EscrowFinish} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.EscrowFinish.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && org_xrpl_rpc_v1_common_pb.Owner.toObject(includeInstance, f),
    offerSequence: (f = msg.getOfferSequence()) && org_xrpl_rpc_v1_common_pb.OfferSequence.toObject(includeInstance, f),
    condition: (f = msg.getCondition()) && org_xrpl_rpc_v1_common_pb.Condition.toObject(includeInstance, f),
    fulfillment: (f = msg.getFulfillment()) && org_xrpl_rpc_v1_common_pb.Fulfillment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.EscrowFinish}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.EscrowFinish;
  return proto.org.xrpl.rpc.v1.EscrowFinish.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.EscrowFinish} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.EscrowFinish}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Owner;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Owner.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.OfferSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OfferSequence.deserializeBinaryFromReader);
      msg.setOfferSequence(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Condition;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Condition.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.Fulfillment;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Fulfillment.deserializeBinaryFromReader);
      msg.setFulfillment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.EscrowFinish.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.EscrowFinish} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.EscrowFinish.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Owner.serializeBinaryToWriter
    );
  }
  f = message.getOfferSequence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.OfferSequence.serializeBinaryToWriter
    );
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Condition.serializeBinaryToWriter
    );
  }
  f = message.getFulfillment();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.Fulfillment.serializeBinaryToWriter
    );
  }
};


/**
 * optional Owner owner = 1;
 * @return {?proto.org.xrpl.rpc.v1.Owner}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.getOwner = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Owner} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Owner, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Owner|undefined} value */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.EscrowFinish.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OfferSequence offer_sequence = 2;
 * @return {?proto.org.xrpl.rpc.v1.OfferSequence}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.getOfferSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OfferSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OfferSequence, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.OfferSequence|undefined} value */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.setOfferSequence = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.EscrowFinish.prototype.clearOfferSequence = function() {
  this.setOfferSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.hasOfferSequence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Condition condition = 3;
 * @return {?proto.org.xrpl.rpc.v1.Condition}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.getCondition = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Condition} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Condition, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Condition|undefined} value */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.setCondition = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.EscrowFinish.prototype.clearCondition = function() {
  this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Fulfillment fulfillment = 4;
 * @return {?proto.org.xrpl.rpc.v1.Fulfillment}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.getFulfillment = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Fulfillment} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Fulfillment, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.Fulfillment|undefined} value */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.setFulfillment = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.EscrowFinish.prototype.clearFulfillment = function() {
  this.setFulfillment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.EscrowFinish.prototype.hasFulfillment = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.OfferCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.OfferCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.OfferCancel.displayName = 'proto.org.xrpl.rpc.v1.OfferCancel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.OfferCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.OfferCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.OfferCancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.OfferCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    offerSequence: (f = msg.getOfferSequence()) && org_xrpl_rpc_v1_common_pb.OfferSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.OfferCancel}
 */
proto.org.xrpl.rpc.v1.OfferCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.OfferCancel;
  return proto.org.xrpl.rpc.v1.OfferCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.OfferCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.OfferCancel}
 */
proto.org.xrpl.rpc.v1.OfferCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.OfferSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OfferSequence.deserializeBinaryFromReader);
      msg.setOfferSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.OfferCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.OfferCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.OfferCancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.OfferCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOfferSequence();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.OfferSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional OfferSequence offer_sequence = 1;
 * @return {?proto.org.xrpl.rpc.v1.OfferSequence}
 */
proto.org.xrpl.rpc.v1.OfferCancel.prototype.getOfferSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OfferSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OfferSequence, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.OfferSequence|undefined} value */
proto.org.xrpl.rpc.v1.OfferCancel.prototype.setOfferSequence = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.OfferCancel.prototype.clearOfferSequence = function() {
  this.setOfferSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.OfferCancel.prototype.hasOfferSequence = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.OfferCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.OfferCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.OfferCreate.displayName = 'proto.org.xrpl.rpc.v1.OfferCreate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.OfferCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.OfferCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.OfferCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    expiration: (f = msg.getExpiration()) && org_xrpl_rpc_v1_common_pb.Expiration.toObject(includeInstance, f),
    offerSequence: (f = msg.getOfferSequence()) && org_xrpl_rpc_v1_common_pb.OfferSequence.toObject(includeInstance, f),
    takerGets: (f = msg.getTakerGets()) && org_xrpl_rpc_v1_common_pb.TakerGets.toObject(includeInstance, f),
    takerPays: (f = msg.getTakerPays()) && org_xrpl_rpc_v1_common_pb.TakerPays.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.OfferCreate}
 */
proto.org.xrpl.rpc.v1.OfferCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.OfferCreate;
  return proto.org.xrpl.rpc.v1.OfferCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.OfferCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.OfferCreate}
 */
proto.org.xrpl.rpc.v1.OfferCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Expiration;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Expiration.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.OfferSequence;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.OfferSequence.deserializeBinaryFromReader);
      msg.setOfferSequence(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.TakerGets;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TakerGets.deserializeBinaryFromReader);
      msg.setTakerGets(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.TakerPays;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.TakerPays.deserializeBinaryFromReader);
      msg.setTakerPays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.OfferCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.OfferCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.OfferCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Expiration.serializeBinaryToWriter
    );
  }
  f = message.getOfferSequence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.OfferSequence.serializeBinaryToWriter
    );
  }
  f = message.getTakerGets();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.TakerGets.serializeBinaryToWriter
    );
  }
  f = message.getTakerPays();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.TakerPays.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expiration expiration = 1;
 * @return {?proto.org.xrpl.rpc.v1.Expiration}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.getExpiration = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Expiration} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Expiration, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Expiration|undefined} value */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.OfferCreate.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OfferSequence offer_sequence = 2;
 * @return {?proto.org.xrpl.rpc.v1.OfferSequence}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.getOfferSequence = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.OfferSequence} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.OfferSequence, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.OfferSequence|undefined} value */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.setOfferSequence = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.OfferCreate.prototype.clearOfferSequence = function() {
  this.setOfferSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.hasOfferSequence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TakerGets taker_gets = 3;
 * @return {?proto.org.xrpl.rpc.v1.TakerGets}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.getTakerGets = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TakerGets} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TakerGets, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.TakerGets|undefined} value */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.setTakerGets = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.OfferCreate.prototype.clearTakerGets = function() {
  this.setTakerGets(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.hasTakerGets = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TakerPays taker_pays = 4;
 * @return {?proto.org.xrpl.rpc.v1.TakerPays}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.getTakerPays = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.TakerPays} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.TakerPays, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.TakerPays|undefined} value */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.setTakerPays = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.OfferCreate.prototype.clearTakerPays = function() {
  this.setTakerPays(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.OfferCreate.prototype.hasTakerPays = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.Payment.repeatedFields_, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Payment.displayName = 'proto.org.xrpl.rpc.v1.Payment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.Payment.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Payment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && org_xrpl_rpc_v1_common_pb.Amount.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && org_xrpl_rpc_v1_common_pb.Destination.toObject(includeInstance, f),
    destinationTag: (f = msg.getDestinationTag()) && org_xrpl_rpc_v1_common_pb.DestinationTag.toObject(includeInstance, f),
    invoiceId: (f = msg.getInvoiceId()) && org_xrpl_rpc_v1_common_pb.InvoiceID.toObject(includeInstance, f),
    pathsList: jspb.Message.toObjectList(msg.getPathsList(),
    proto.org.xrpl.rpc.v1.Payment.Path.toObject, includeInstance),
    sendMax: (f = msg.getSendMax()) && org_xrpl_rpc_v1_common_pb.SendMax.toObject(includeInstance, f),
    deliverMin: (f = msg.getDeliverMin()) && org_xrpl_rpc_v1_common_pb.DeliverMin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Payment}
 */
proto.org.xrpl.rpc.v1.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Payment;
  return proto.org.xrpl.rpc.v1.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Payment}
 */
proto.org.xrpl.rpc.v1.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Amount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Destination;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationTag.deserializeBinaryFromReader);
      msg.setDestinationTag(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.InvoiceID;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.InvoiceID.deserializeBinaryFromReader);
      msg.setInvoiceId(value);
      break;
    case 5:
      var value = new proto.org.xrpl.rpc.v1.Payment.Path;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Payment.Path.deserializeBinaryFromReader);
      msg.addPaths(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.SendMax;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SendMax.deserializeBinaryFromReader);
      msg.setSendMax(value);
      break;
    case 7:
      var value = new org_xrpl_rpc_v1_common_pb.DeliverMin;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DeliverMin.deserializeBinaryFromReader);
      msg.setDeliverMin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Payment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Destination.serializeBinaryToWriter
    );
  }
  f = message.getDestinationTag();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationTag.serializeBinaryToWriter
    );
  }
  f = message.getInvoiceId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.InvoiceID.serializeBinaryToWriter
    );
  }
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.org.xrpl.rpc.v1.Payment.Path.serializeBinaryToWriter
    );
  }
  f = message.getSendMax();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.SendMax.serializeBinaryToWriter
    );
  }
  f = message.getDeliverMin();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      org_xrpl_rpc_v1_common_pb.DeliverMin.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Payment.PathElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Payment.PathElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Payment.PathElement.displayName = 'proto.org.xrpl.rpc.v1.Payment.PathElement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Payment.PathElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Payment.PathElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_account_pb.AccountAddress.toObject(includeInstance, f),
    currency: (f = msg.getCurrency()) && org_xrpl_rpc_v1_amount_pb.Currency.toObject(includeInstance, f),
    issuer: (f = msg.getIssuer()) && org_xrpl_rpc_v1_account_pb.AccountAddress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Payment.PathElement}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Payment.PathElement;
  return proto.org.xrpl.rpc.v1.Payment.PathElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Payment.PathElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Payment.PathElement}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_account_pb.AccountAddress;
      reader.readMessage(value,org_xrpl_rpc_v1_account_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_amount_pb.Currency;
      reader.readMessage(value,org_xrpl_rpc_v1_amount_pb.Currency.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_account_pb.AccountAddress;
      reader.readMessage(value,org_xrpl_rpc_v1_account_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Payment.PathElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Payment.PathElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_account_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_amount_pb.Currency.serializeBinaryToWriter
    );
  }
  f = message.getIssuer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_account_pb.AccountAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountAddress account = 1;
 * @return {?proto.org.xrpl.rpc.v1.AccountAddress}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_account_pb.AccountAddress, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.AccountAddress|undefined} value */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Currency currency = 2;
 * @return {?proto.org.xrpl.rpc.v1.Currency}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.getCurrency = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Currency} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_amount_pb.Currency, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Currency|undefined} value */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.setCurrency = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.clearCurrency = function() {
  this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccountAddress issuer = 3;
 * @return {?proto.org.xrpl.rpc.v1.AccountAddress}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.getIssuer = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_account_pb.AccountAddress, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.AccountAddress|undefined} value */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.setIssuer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.clearIssuer = function() {
  this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Payment.PathElement.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Payment.Path = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.Payment.Path.repeatedFields_, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Payment.Path, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Payment.Path.displayName = 'proto.org.xrpl.rpc.v1.Payment.Path';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.Payment.Path.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Payment.Path.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Payment.Path.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Payment.Path} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Payment.Path.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.org.xrpl.rpc.v1.Payment.PathElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Payment.Path}
 */
proto.org.xrpl.rpc.v1.Payment.Path.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Payment.Path;
  return proto.org.xrpl.rpc.v1.Payment.Path.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Payment.Path} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Payment.Path}
 */
proto.org.xrpl.rpc.v1.Payment.Path.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.xrpl.rpc.v1.Payment.PathElement;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Payment.PathElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Payment.Path.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Payment.Path.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Payment.Path} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Payment.Path.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.xrpl.rpc.v1.Payment.PathElement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PathElement elements = 1;
 * @return {!Array<!proto.org.xrpl.rpc.v1.Payment.PathElement>}
 */
proto.org.xrpl.rpc.v1.Payment.Path.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.Payment.PathElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.xrpl.rpc.v1.Payment.PathElement, 1));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.Payment.PathElement>} value */
proto.org.xrpl.rpc.v1.Payment.Path.prototype.setElementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.Payment.PathElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.Payment.PathElement}
 */
proto.org.xrpl.rpc.v1.Payment.Path.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.xrpl.rpc.v1.Payment.PathElement, opt_index);
};


proto.org.xrpl.rpc.v1.Payment.Path.prototype.clearElementsList = function() {
  this.setElementsList([]);
};


/**
 * optional Amount amount = 1;
 * @return {?proto.org.xrpl.rpc.v1.Amount}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.getAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Amount, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Amount|undefined} value */
proto.org.xrpl.rpc.v1.Payment.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Payment.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Destination destination = 2;
 * @return {?proto.org.xrpl.rpc.v1.Destination}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.getDestination = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Destination} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Destination, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Destination|undefined} value */
proto.org.xrpl.rpc.v1.Payment.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Payment.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DestinationTag destination_tag = 3;
 * @return {?proto.org.xrpl.rpc.v1.DestinationTag}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.getDestinationTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationTag, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationTag|undefined} value */
proto.org.xrpl.rpc.v1.Payment.prototype.setDestinationTag = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Payment.prototype.clearDestinationTag = function() {
  this.setDestinationTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.hasDestinationTag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional InvoiceID invoice_id = 4;
 * @return {?proto.org.xrpl.rpc.v1.InvoiceID}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.getInvoiceId = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.InvoiceID} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.InvoiceID, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.InvoiceID|undefined} value */
proto.org.xrpl.rpc.v1.Payment.prototype.setInvoiceId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.Payment.prototype.clearInvoiceId = function() {
  this.setInvoiceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.hasInvoiceId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Path paths = 5;
 * @return {!Array<!proto.org.xrpl.rpc.v1.Payment.Path>}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.getPathsList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.Payment.Path>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.xrpl.rpc.v1.Payment.Path, 5));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.Payment.Path>} value */
proto.org.xrpl.rpc.v1.Payment.prototype.setPathsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.Payment.Path=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.Payment.Path}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.addPaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.org.xrpl.rpc.v1.Payment.Path, opt_index);
};


proto.org.xrpl.rpc.v1.Payment.prototype.clearPathsList = function() {
  this.setPathsList([]);
};


/**
 * optional SendMax send_max = 6;
 * @return {?proto.org.xrpl.rpc.v1.SendMax}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.getSendMax = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SendMax} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SendMax, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.SendMax|undefined} value */
proto.org.xrpl.rpc.v1.Payment.prototype.setSendMax = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.Payment.prototype.clearSendMax = function() {
  this.setSendMax(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.hasSendMax = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DeliverMin deliver_min = 7;
 * @return {?proto.org.xrpl.rpc.v1.DeliverMin}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.getDeliverMin = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DeliverMin} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DeliverMin, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.DeliverMin|undefined} value */
proto.org.xrpl.rpc.v1.Payment.prototype.setDeliverMin = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.Payment.prototype.clearDeliverMin = function() {
  this.setDeliverMin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Payment.prototype.hasDeliverMin = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.PaymentChannelClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.PaymentChannelClaim.displayName = 'proto.org.xrpl.rpc.v1.PaymentChannelClaim';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.PaymentChannelClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.PaymentChannelClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: (f = msg.getChannel()) && org_xrpl_rpc_v1_common_pb.Channel.toObject(includeInstance, f),
    balance: (f = msg.getBalance()) && org_xrpl_rpc_v1_common_pb.Balance.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && org_xrpl_rpc_v1_common_pb.Amount.toObject(includeInstance, f),
    paymentChannelSignature: (f = msg.getPaymentChannelSignature()) && org_xrpl_rpc_v1_common_pb.PaymentChannelSignature.toObject(includeInstance, f),
    publicKey: (f = msg.getPublicKey()) && org_xrpl_rpc_v1_common_pb.PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.PaymentChannelClaim}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.PaymentChannelClaim;
  return proto.org.xrpl.rpc.v1.PaymentChannelClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.PaymentChannelClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.PaymentChannelClaim}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Channel;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Balance;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Balance.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Amount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.PaymentChannelSignature;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PaymentChannelSignature.deserializeBinaryFromReader);
      msg.setPaymentChannelSignature(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.PublicKey;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.PaymentChannelClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.PaymentChannelClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Channel.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Balance.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getPaymentChannelSignature();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.PaymentChannelSignature.serializeBinaryToWriter
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional Channel channel = 1;
 * @return {?proto.org.xrpl.rpc.v1.Channel}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.getChannel = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Channel} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Channel, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Channel|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.setChannel = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.clearChannel = function() {
  this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Balance balance = 2;
 * @return {?proto.org.xrpl.rpc.v1.Balance}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.getBalance = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Balance} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Balance, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Balance|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.setBalance = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.clearBalance = function() {
  this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Amount amount = 3;
 * @return {?proto.org.xrpl.rpc.v1.Amount}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.getAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Amount, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Amount|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PaymentChannelSignature payment_channel_signature = 4;
 * @return {?proto.org.xrpl.rpc.v1.PaymentChannelSignature}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.getPaymentChannelSignature = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PaymentChannelSignature} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PaymentChannelSignature, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.PaymentChannelSignature|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.setPaymentChannelSignature = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.clearPaymentChannelSignature = function() {
  this.setPaymentChannelSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.hasPaymentChannelSignature = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PublicKey public_key = 5;
 * @return {?proto.org.xrpl.rpc.v1.PublicKey}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.getPublicKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PublicKey} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PublicKey, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.PublicKey|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.setPublicKey = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.clearPublicKey = function() {
  this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelClaim.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.PaymentChannelCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.PaymentChannelCreate.displayName = 'proto.org.xrpl.rpc.v1.PaymentChannelCreate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.PaymentChannelCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.PaymentChannelCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && org_xrpl_rpc_v1_common_pb.Amount.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && org_xrpl_rpc_v1_common_pb.Destination.toObject(includeInstance, f),
    settleDelay: (f = msg.getSettleDelay()) && org_xrpl_rpc_v1_common_pb.SettleDelay.toObject(includeInstance, f),
    publicKey: (f = msg.getPublicKey()) && org_xrpl_rpc_v1_common_pb.PublicKey.toObject(includeInstance, f),
    cancelAfter: (f = msg.getCancelAfter()) && org_xrpl_rpc_v1_common_pb.CancelAfter.toObject(includeInstance, f),
    destinationTag: (f = msg.getDestinationTag()) && org_xrpl_rpc_v1_common_pb.DestinationTag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.PaymentChannelCreate}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.PaymentChannelCreate;
  return proto.org.xrpl.rpc.v1.PaymentChannelCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.PaymentChannelCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.PaymentChannelCreate}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Amount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Destination;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.SettleDelay;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SettleDelay.deserializeBinaryFromReader);
      msg.setSettleDelay(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_common_pb.PublicKey;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    case 5:
      var value = new org_xrpl_rpc_v1_common_pb.CancelAfter;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.CancelAfter.deserializeBinaryFromReader);
      msg.setCancelAfter(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_common_pb.DestinationTag;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.DestinationTag.deserializeBinaryFromReader);
      msg.setDestinationTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.PaymentChannelCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.PaymentChannelCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Destination.serializeBinaryToWriter
    );
  }
  f = message.getSettleDelay();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.SettleDelay.serializeBinaryToWriter
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_common_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getCancelAfter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      org_xrpl_rpc_v1_common_pb.CancelAfter.serializeBinaryToWriter
    );
  }
  f = message.getDestinationTag();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      org_xrpl_rpc_v1_common_pb.DestinationTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional Amount amount = 1;
 * @return {?proto.org.xrpl.rpc.v1.Amount}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.getAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Amount, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Amount|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Destination destination = 2;
 * @return {?proto.org.xrpl.rpc.v1.Destination}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.getDestination = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Destination} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Destination, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Destination|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SettleDelay settle_delay = 3;
 * @return {?proto.org.xrpl.rpc.v1.SettleDelay}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.getSettleDelay = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SettleDelay} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SettleDelay, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.SettleDelay|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.setSettleDelay = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.clearSettleDelay = function() {
  this.setSettleDelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.hasSettleDelay = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PublicKey public_key = 4;
 * @return {?proto.org.xrpl.rpc.v1.PublicKey}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.getPublicKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.PublicKey} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.PublicKey, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.PublicKey|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.setPublicKey = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.clearPublicKey = function() {
  this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CancelAfter cancel_after = 5;
 * @return {?proto.org.xrpl.rpc.v1.CancelAfter}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.getCancelAfter = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.CancelAfter} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.CancelAfter, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.CancelAfter|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.setCancelAfter = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.clearCancelAfter = function() {
  this.setCancelAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.hasCancelAfter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DestinationTag destination_tag = 6;
 * @return {?proto.org.xrpl.rpc.v1.DestinationTag}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.getDestinationTag = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.DestinationTag} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.DestinationTag, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.DestinationTag|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.setDestinationTag = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.clearDestinationTag = function() {
  this.setDestinationTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelCreate.prototype.hasDestinationTag = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.PaymentChannelFund, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.PaymentChannelFund.displayName = 'proto.org.xrpl.rpc.v1.PaymentChannelFund';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.PaymentChannelFund.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.PaymentChannelFund} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: (f = msg.getChannel()) && org_xrpl_rpc_v1_common_pb.Channel.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && org_xrpl_rpc_v1_common_pb.Amount.toObject(includeInstance, f),
    expiration: (f = msg.getExpiration()) && org_xrpl_rpc_v1_common_pb.Expiration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.PaymentChannelFund}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.PaymentChannelFund;
  return proto.org.xrpl.rpc.v1.PaymentChannelFund.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.PaymentChannelFund} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.PaymentChannelFund}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.Channel;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.Amount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.Expiration;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.Expiration.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.PaymentChannelFund.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.PaymentChannelFund} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.Channel.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.Expiration.serializeBinaryToWriter
    );
  }
};


/**
 * optional Channel channel = 1;
 * @return {?proto.org.xrpl.rpc.v1.Channel}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.getChannel = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Channel} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Channel, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.Channel|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.setChannel = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.clearChannel = function() {
  this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Amount amount = 2;
 * @return {?proto.org.xrpl.rpc.v1.Amount}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.getAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Amount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Amount, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.Amount|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Expiration expiration = 3;
 * @return {?proto.org.xrpl.rpc.v1.Expiration}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.getExpiration = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Expiration} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.Expiration, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Expiration|undefined} value */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.PaymentChannelFund.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.SetRegularKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.SetRegularKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.SetRegularKey.displayName = 'proto.org.xrpl.rpc.v1.SetRegularKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.SetRegularKey.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.SetRegularKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.SetRegularKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.SetRegularKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    regularKey: (f = msg.getRegularKey()) && org_xrpl_rpc_v1_common_pb.RegularKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.SetRegularKey}
 */
proto.org.xrpl.rpc.v1.SetRegularKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.SetRegularKey;
  return proto.org.xrpl.rpc.v1.SetRegularKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.SetRegularKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.SetRegularKey}
 */
proto.org.xrpl.rpc.v1.SetRegularKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.RegularKey;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.RegularKey.deserializeBinaryFromReader);
      msg.setRegularKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.SetRegularKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.SetRegularKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.SetRegularKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.SetRegularKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegularKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.RegularKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional RegularKey regular_key = 1;
 * @return {?proto.org.xrpl.rpc.v1.RegularKey}
 */
proto.org.xrpl.rpc.v1.SetRegularKey.prototype.getRegularKey = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.RegularKey} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.RegularKey, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.RegularKey|undefined} value */
proto.org.xrpl.rpc.v1.SetRegularKey.prototype.setRegularKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.SetRegularKey.prototype.clearRegularKey = function() {
  this.setRegularKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.SetRegularKey.prototype.hasRegularKey = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.SignerListSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.SignerListSet.repeatedFields_, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.SignerListSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.SignerListSet.displayName = 'proto.org.xrpl.rpc.v1.SignerListSet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.SignerListSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.SignerListSet.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.SignerListSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.SignerListSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.SignerListSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    signerQuorum: (f = msg.getSignerQuorum()) && org_xrpl_rpc_v1_common_pb.SignerQuorum.toObject(includeInstance, f),
    signerEntriesList: jspb.Message.toObjectList(msg.getSignerEntriesList(),
    org_xrpl_rpc_v1_common_pb.SignerEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.SignerListSet}
 */
proto.org.xrpl.rpc.v1.SignerListSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.SignerListSet;
  return proto.org.xrpl.rpc.v1.SignerListSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.SignerListSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.SignerListSet}
 */
proto.org.xrpl.rpc.v1.SignerListSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.SignerQuorum;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SignerQuorum.deserializeBinaryFromReader);
      msg.setSignerQuorum(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.SignerEntry;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.SignerEntry.deserializeBinaryFromReader);
      msg.addSignerEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.SignerListSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.SignerListSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.SignerListSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.SignerListSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignerQuorum();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.SignerQuorum.serializeBinaryToWriter
    );
  }
  f = message.getSignerEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.SignerEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignerQuorum signer_quorum = 1;
 * @return {?proto.org.xrpl.rpc.v1.SignerQuorum}
 */
proto.org.xrpl.rpc.v1.SignerListSet.prototype.getSignerQuorum = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.SignerQuorum} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.SignerQuorum, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.SignerQuorum|undefined} value */
proto.org.xrpl.rpc.v1.SignerListSet.prototype.setSignerQuorum = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.SignerListSet.prototype.clearSignerQuorum = function() {
  this.setSignerQuorum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.SignerListSet.prototype.hasSignerQuorum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SignerEntry signer_entries = 2;
 * @return {!Array<!proto.org.xrpl.rpc.v1.SignerEntry>}
 */
proto.org.xrpl.rpc.v1.SignerListSet.prototype.getSignerEntriesList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.SignerEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, org_xrpl_rpc_v1_common_pb.SignerEntry, 2));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.SignerEntry>} value */
proto.org.xrpl.rpc.v1.SignerListSet.prototype.setSignerEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.SignerEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.SignerEntry}
 */
proto.org.xrpl.rpc.v1.SignerListSet.prototype.addSignerEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.org.xrpl.rpc.v1.SignerEntry, opt_index);
};


proto.org.xrpl.rpc.v1.SignerListSet.prototype.clearSignerEntriesList = function() {
  this.setSignerEntriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.TrustSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.TrustSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.TrustSet.displayName = 'proto.org.xrpl.rpc.v1.TrustSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.TrustSet.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.TrustSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.TrustSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.TrustSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    limitAmount: (f = msg.getLimitAmount()) && org_xrpl_rpc_v1_common_pb.LimitAmount.toObject(includeInstance, f),
    qualityIn: (f = msg.getQualityIn()) && org_xrpl_rpc_v1_common_pb.QualityIn.toObject(includeInstance, f),
    qualityOut: (f = msg.getQualityOut()) && org_xrpl_rpc_v1_common_pb.QualityOut.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.TrustSet}
 */
proto.org.xrpl.rpc.v1.TrustSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.TrustSet;
  return proto.org.xrpl.rpc.v1.TrustSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.TrustSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.TrustSet}
 */
proto.org.xrpl.rpc.v1.TrustSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_common_pb.LimitAmount;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.LimitAmount.deserializeBinaryFromReader);
      msg.setLimitAmount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_common_pb.QualityIn;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.QualityIn.deserializeBinaryFromReader);
      msg.setQualityIn(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_common_pb.QualityOut;
      reader.readMessage(value,org_xrpl_rpc_v1_common_pb.QualityOut.deserializeBinaryFromReader);
      msg.setQualityOut(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.TrustSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.TrustSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.TrustSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.TrustSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimitAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_common_pb.LimitAmount.serializeBinaryToWriter
    );
  }
  f = message.getQualityIn();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_common_pb.QualityIn.serializeBinaryToWriter
    );
  }
  f = message.getQualityOut();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_common_pb.QualityOut.serializeBinaryToWriter
    );
  }
};


/**
 * optional LimitAmount limit_amount = 1;
 * @return {?proto.org.xrpl.rpc.v1.LimitAmount}
 */
proto.org.xrpl.rpc.v1.TrustSet.prototype.getLimitAmount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LimitAmount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.LimitAmount, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.LimitAmount|undefined} value */
proto.org.xrpl.rpc.v1.TrustSet.prototype.setLimitAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.TrustSet.prototype.clearLimitAmount = function() {
  this.setLimitAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.TrustSet.prototype.hasLimitAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional QualityIn quality_in = 2;
 * @return {?proto.org.xrpl.rpc.v1.QualityIn}
 */
proto.org.xrpl.rpc.v1.TrustSet.prototype.getQualityIn = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.QualityIn} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.QualityIn, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.QualityIn|undefined} value */
proto.org.xrpl.rpc.v1.TrustSet.prototype.setQualityIn = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.TrustSet.prototype.clearQualityIn = function() {
  this.setQualityIn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.TrustSet.prototype.hasQualityIn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional QualityOut quality_out = 3;
 * @return {?proto.org.xrpl.rpc.v1.QualityOut}
 */
proto.org.xrpl.rpc.v1.TrustSet.prototype.getQualityOut = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.QualityOut} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_common_pb.QualityOut, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.QualityOut|undefined} value */
proto.org.xrpl.rpc.v1.TrustSet.prototype.setQualityOut = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.TrustSet.prototype.clearQualityOut = function() {
  this.setQualityOut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.TrustSet.prototype.hasQualityOut = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.org.xrpl.rpc.v1);
