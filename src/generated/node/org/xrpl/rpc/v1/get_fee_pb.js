/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var org_xrpl_rpc_v1_amount_pb = require('../../../../org/xrpl/rpc/v1/amount_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_amount_pb);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Fee', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.FeeLevels', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.GetFeeRequest', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.GetFeeResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.GetFeeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.GetFeeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.GetFeeRequest.displayName = 'proto.org.xrpl.rpc.v1.GetFeeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.GetFeeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.GetFeeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.GetFeeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.GetFeeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.GetFeeRequest}
 */
proto.org.xrpl.rpc.v1.GetFeeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.GetFeeRequest;
  return proto.org.xrpl.rpc.v1.GetFeeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.GetFeeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.GetFeeRequest}
 */
proto.org.xrpl.rpc.v1.GetFeeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.GetFeeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.GetFeeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.GetFeeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.GetFeeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.GetFeeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.GetFeeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.GetFeeResponse.displayName = 'proto.org.xrpl.rpc.v1.GetFeeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.GetFeeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.GetFeeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentLedgerSize: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    currentQueueSize: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    fee: (f = msg.getFee()) && proto.org.xrpl.rpc.v1.Fee.toObject(includeInstance, f),
    expectedLedgerSize: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    ledgerCurrentIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    levels: (f = msg.getLevels()) && proto.org.xrpl.rpc.v1.FeeLevels.toObject(includeInstance, f),
    maxQueueSize: jspb.Message.getFieldWithDefault(msg, 7, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.GetFeeResponse}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.GetFeeResponse;
  return proto.org.xrpl.rpc.v1.GetFeeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.GetFeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.GetFeeResponse}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setCurrentLedgerSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setCurrentQueueSize(value);
      break;
    case 3:
      var value = new proto.org.xrpl.rpc.v1.Fee;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Fee.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setExpectedLedgerSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedgerCurrentIndex(value);
      break;
    case 6:
      var value = new proto.org.xrpl.rpc.v1.FeeLevels;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.FeeLevels.deserializeBinaryFromReader);
      msg.setLevels(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMaxQueueSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.GetFeeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.GetFeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentLedgerSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getCurrentQueueSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.org.xrpl.rpc.v1.Fee.serializeBinaryToWriter
    );
  }
  f = message.getExpectedLedgerSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getLedgerCurrentIndex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getLevels();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.org.xrpl.rpc.v1.FeeLevels.serializeBinaryToWriter
    );
  }
  f = message.getMaxQueueSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      7,
      f
    );
  }
};


/**
 * optional uint64 current_ledger_size = 1;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.getCurrentLedgerSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.setCurrentLedgerSize = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 current_queue_size = 2;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.getCurrentQueueSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.setCurrentQueueSize = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional Fee fee = 3;
 * @return {?proto.org.xrpl.rpc.v1.Fee}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.getFee = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Fee} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.Fee, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.Fee|undefined} value */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.hasFee = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 expected_ledger_size = 4;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.getExpectedLedgerSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.setExpectedLedgerSize = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional uint32 ledger_current_index = 5;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.getLedgerCurrentIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.setLedgerCurrentIndex = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional FeeLevels levels = 6;
 * @return {?proto.org.xrpl.rpc.v1.FeeLevels}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.getLevels = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.FeeLevels} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.FeeLevels, 6));
};


/** @param {?proto.org.xrpl.rpc.v1.FeeLevels|undefined} value */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.setLevels = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.clearLevels = function() {
  this.setLevels(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.hasLevels = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 max_queue_size = 7;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.getMaxQueueSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.GetFeeResponse.prototype.setMaxQueueSize = function(value) {
  jspb.Message.setProto3StringIntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Fee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Fee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Fee.displayName = 'proto.org.xrpl.rpc.v1.Fee';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Fee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Fee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Fee.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseFee: (f = msg.getBaseFee()) && org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f),
    medianFee: (f = msg.getMedianFee()) && org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f),
    minimumFee: (f = msg.getMinimumFee()) && org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f),
    openLedgerFee: (f = msg.getOpenLedgerFee()) && org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Fee}
 */
proto.org.xrpl.rpc.v1.Fee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Fee;
  return proto.org.xrpl.rpc.v1.Fee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Fee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Fee}
 */
proto.org.xrpl.rpc.v1.Fee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setBaseFee(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setMedianFee(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setMinimumFee(value);
      break;
    case 4:
      var value = new org_xrpl_rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setOpenLedgerFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Fee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Fee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Fee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getMedianFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getMinimumFee();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getOpenLedgerFee();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      org_xrpl_rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional XRPDropsAmount base_fee = 1;
 * @return {?proto.org.xrpl.rpc.v1.XRPDropsAmount}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.getBaseFee = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_amount_pb.XRPDropsAmount, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.XRPDropsAmount|undefined} value */
proto.org.xrpl.rpc.v1.Fee.prototype.setBaseFee = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.Fee.prototype.clearBaseFee = function() {
  this.setBaseFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.hasBaseFee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional XRPDropsAmount median_fee = 2;
 * @return {?proto.org.xrpl.rpc.v1.XRPDropsAmount}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.getMedianFee = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_amount_pb.XRPDropsAmount, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.XRPDropsAmount|undefined} value */
proto.org.xrpl.rpc.v1.Fee.prototype.setMedianFee = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.org.xrpl.rpc.v1.Fee.prototype.clearMedianFee = function() {
  this.setMedianFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.hasMedianFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional XRPDropsAmount minimum_fee = 3;
 * @return {?proto.org.xrpl.rpc.v1.XRPDropsAmount}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.getMinimumFee = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_amount_pb.XRPDropsAmount, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.XRPDropsAmount|undefined} value */
proto.org.xrpl.rpc.v1.Fee.prototype.setMinimumFee = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.xrpl.rpc.v1.Fee.prototype.clearMinimumFee = function() {
  this.setMinimumFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.hasMinimumFee = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional XRPDropsAmount open_ledger_fee = 4;
 * @return {?proto.org.xrpl.rpc.v1.XRPDropsAmount}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.getOpenLedgerFee = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_amount_pb.XRPDropsAmount, 4));
};


/** @param {?proto.org.xrpl.rpc.v1.XRPDropsAmount|undefined} value */
proto.org.xrpl.rpc.v1.Fee.prototype.setOpenLedgerFee = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.org.xrpl.rpc.v1.Fee.prototype.clearOpenLedgerFee = function() {
  this.setOpenLedgerFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.Fee.prototype.hasOpenLedgerFee = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.FeeLevels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.FeeLevels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.FeeLevels.displayName = 'proto.org.xrpl.rpc.v1.FeeLevels';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.FeeLevels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.FeeLevels} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.FeeLevels.toObject = function(includeInstance, msg) {
  var f, obj = {
    medianLevel: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    minimumLevel: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    openLedgerLevel: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    referenceLevel: jspb.Message.getFieldWithDefault(msg, 4, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.FeeLevels}
 */
proto.org.xrpl.rpc.v1.FeeLevels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.FeeLevels;
  return proto.org.xrpl.rpc.v1.FeeLevels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.FeeLevels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.FeeLevels}
 */
proto.org.xrpl.rpc.v1.FeeLevels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMedianLevel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMinimumLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setOpenLedgerLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setReferenceLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.FeeLevels.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.FeeLevels} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.FeeLevels.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMedianLevel();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getMinimumLevel();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getOpenLedgerLevel();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getReferenceLevel();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
};


/**
 * optional uint64 median_level = 1;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.getMedianLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.setMedianLevel = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 minimum_level = 2;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.getMinimumLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.setMinimumLevel = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 open_ledger_level = 3;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.getOpenLedgerLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.setOpenLedgerLevel = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional uint64 reference_level = 4;
 * @return {string}
 */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.getReferenceLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.org.xrpl.rpc.v1.FeeLevels.prototype.setReferenceLevel = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};


goog.object.extend(exports, proto.org.xrpl.rpc.v1);
