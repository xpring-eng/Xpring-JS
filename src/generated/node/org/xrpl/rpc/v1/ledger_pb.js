/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.org.xrpl.rpc.v1.LedgerRange', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.LedgerSpecifier', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.LedgerSpecifier.Shortcut', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.xrpl.rpc.v1.LedgerSpecifier.oneofGroups_);
};
goog.inherits(proto.org.xrpl.rpc.v1.LedgerSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.LedgerSpecifier.displayName = 'proto.org.xrpl.rpc.v1.LedgerSpecifier';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.LedgerCase = {
  LEDGER_NOT_SET: 0,
  SHORTCUT: 1,
  SEQUENCE: 2,
  HASH: 3
};

/**
 * @return {proto.org.xrpl.rpc.v1.LedgerSpecifier.LedgerCase}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.getLedgerCase = function() {
  return /** @type {proto.org.xrpl.rpc.v1.LedgerSpecifier.LedgerCase} */(jspb.Message.computeOneofCase(this, proto.org.xrpl.rpc.v1.LedgerSpecifier.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.LedgerSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.LedgerSpecifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortcut: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.LedgerSpecifier}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.LedgerSpecifier;
  return proto.org.xrpl.rpc.v1.LedgerSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.LedgerSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.LedgerSpecifier}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.org.xrpl.rpc.v1.LedgerSpecifier.Shortcut} */ (reader.readEnum());
      msg.setShortcut(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.LedgerSpecifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.LedgerSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.org.xrpl.rpc.v1.LedgerSpecifier.Shortcut} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.Shortcut = {
  SHORTCUT_UNSPECIFIED: 0,
  SHORTCUT_VALIDATED: 1,
  SHORTCUT_CLOSED: 2,
  SHORTCUT_CURRENT: 3
};

/**
 * optional Shortcut shortcut = 1;
 * @return {!proto.org.xrpl.rpc.v1.LedgerSpecifier.Shortcut}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.getShortcut = function() {
  return /** @type {!proto.org.xrpl.rpc.v1.LedgerSpecifier.Shortcut} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.org.xrpl.rpc.v1.LedgerSpecifier.Shortcut} value */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.setShortcut = function(value) {
  jspb.Message.setOneofField(this, 1, proto.org.xrpl.rpc.v1.LedgerSpecifier.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.clearShortcut = function() {
  jspb.Message.setOneofField(this, 1, proto.org.xrpl.rpc.v1.LedgerSpecifier.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.hasShortcut = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 sequence = 2;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.setSequence = function(value) {
  jspb.Message.setOneofField(this, 2, proto.org.xrpl.rpc.v1.LedgerSpecifier.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.clearSequence = function() {
  jspb.Message.setOneofField(this, 2, proto.org.xrpl.rpc.v1.LedgerSpecifier.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes hash = 3;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.setHash = function(value) {
  jspb.Message.setOneofField(this, 3, proto.org.xrpl.rpc.v1.LedgerSpecifier.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.clearHash = function() {
  jspb.Message.setOneofField(this, 3, proto.org.xrpl.rpc.v1.LedgerSpecifier.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.LedgerSpecifier.prototype.hasHash = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.LedgerRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.LedgerRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.LedgerRange.displayName = 'proto.org.xrpl.rpc.v1.LedgerRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.LedgerRange.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.LedgerRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.LedgerRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.LedgerRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerIndexMin: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ledgerIndexMax: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.LedgerRange}
 */
proto.org.xrpl.rpc.v1.LedgerRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.LedgerRange;
  return proto.org.xrpl.rpc.v1.LedgerRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.LedgerRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.LedgerRange}
 */
proto.org.xrpl.rpc.v1.LedgerRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedgerIndexMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedgerIndexMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.LedgerRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.LedgerRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.LedgerRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.LedgerRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerIndexMin();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLedgerIndexMax();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 ledger_index_min = 1;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.LedgerRange.prototype.getLedgerIndexMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.LedgerRange.prototype.setLedgerIndexMin = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 ledger_index_max = 2;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.LedgerRange.prototype.getLedgerIndexMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.LedgerRange.prototype.setLedgerIndexMax = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.org.xrpl.rpc.v1);
