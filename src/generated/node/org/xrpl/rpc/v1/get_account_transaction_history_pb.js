/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var org_xrpl_rpc_v1_get_transaction_pb = require('../../../../org/xrpl/rpc/v1/get_transaction_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_get_transaction_pb);
var org_xrpl_rpc_v1_account_pb = require('../../../../org/xrpl/rpc/v1/account_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_account_pb);
var org_xrpl_rpc_v1_ledger_pb = require('../../../../org/xrpl/rpc/v1/ledger_pb.js');
goog.object.extend(proto, org_xrpl_rpc_v1_ledger_pb);
goog.exportSymbol('proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse', null, global);
goog.exportSymbol('proto.org.xrpl.rpc.v1.Marker', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.oneofGroups_);
};
goog.inherits(proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.displayName = 'proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.LedgerCase = {
  LEDGER_NOT_SET: 0,
  LEDGER_SPECIFIER: 2,
  LEDGER_RANGE: 3
};

/**
 * @return {proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.LedgerCase}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.getLedgerCase = function() {
  return /** @type {proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.LedgerCase} */(jspb.Message.computeOneofCase(this, proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_account_pb.AccountAddress.toObject(includeInstance, f),
    ledgerSpecifier: (f = msg.getLedgerSpecifier()) && org_xrpl_rpc_v1_ledger_pb.LedgerSpecifier.toObject(includeInstance, f),
    ledgerRange: (f = msg.getLedgerRange()) && org_xrpl_rpc_v1_ledger_pb.LedgerRange.toObject(includeInstance, f),
    binary: jspb.Message.getFieldWithDefault(msg, 4, false),
    forward: jspb.Message.getFieldWithDefault(msg, 5, false),
    limit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marker: (f = msg.getMarker()) && proto.org.xrpl.rpc.v1.Marker.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest;
  return proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_account_pb.AccountAddress;
      reader.readMessage(value,org_xrpl_rpc_v1_account_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new org_xrpl_rpc_v1_ledger_pb.LedgerSpecifier;
      reader.readMessage(value,org_xrpl_rpc_v1_ledger_pb.LedgerSpecifier.deserializeBinaryFromReader);
      msg.setLedgerSpecifier(value);
      break;
    case 3:
      var value = new org_xrpl_rpc_v1_ledger_pb.LedgerRange;
      reader.readMessage(value,org_xrpl_rpc_v1_ledger_pb.LedgerRange.deserializeBinaryFromReader);
      msg.setLedgerRange(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBinary(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForward(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 7:
      var value = new proto.org.xrpl.rpc.v1.Marker;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Marker.deserializeBinaryFromReader);
      msg.setMarker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_account_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getLedgerSpecifier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      org_xrpl_rpc_v1_ledger_pb.LedgerSpecifier.serializeBinaryToWriter
    );
  }
  f = message.getLedgerRange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      org_xrpl_rpc_v1_ledger_pb.LedgerRange.serializeBinaryToWriter
    );
  }
  f = message.getBinary();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getForward();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMarker();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.org.xrpl.rpc.v1.Marker.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountAddress account = 1;
 * @return {?proto.org.xrpl.rpc.v1.AccountAddress}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_account_pb.AccountAddress, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.AccountAddress|undefined} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LedgerSpecifier ledger_specifier = 2;
 * @return {?proto.org.xrpl.rpc.v1.LedgerSpecifier}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.getLedgerSpecifier = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LedgerSpecifier} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_ledger_pb.LedgerSpecifier, 2));
};


/** @param {?proto.org.xrpl.rpc.v1.LedgerSpecifier|undefined} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.setLedgerSpecifier = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.clearLedgerSpecifier = function() {
  this.setLedgerSpecifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.hasLedgerSpecifier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LedgerRange ledger_range = 3;
 * @return {?proto.org.xrpl.rpc.v1.LedgerRange}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.getLedgerRange = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.LedgerRange} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_ledger_pb.LedgerRange, 3));
};


/** @param {?proto.org.xrpl.rpc.v1.LedgerRange|undefined} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.setLedgerRange = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.oneofGroups_[0], value);
};


proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.clearLedgerRange = function() {
  this.setLedgerRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.hasLedgerRange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool binary = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.getBinary = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.setBinary = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool forward = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.getForward = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.setForward = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 limit = 6;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Marker marker = 7;
 * @return {?proto.org.xrpl.rpc.v1.Marker}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.getMarker = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Marker} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.Marker, 7));
};


/** @param {?proto.org.xrpl.rpc.v1.Marker|undefined} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.setMarker = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.clearMarker = function() {
  this.setMarker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.prototype.hasMarker = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.displayName = 'proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && org_xrpl_rpc_v1_account_pb.AccountAddress.toObject(includeInstance, f),
    ledgerIndexMin: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ledgerIndexMax: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    marker: (f = msg.getMarker()) && proto.org.xrpl.rpc.v1.Marker.toObject(includeInstance, f),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    org_xrpl_rpc_v1_get_transaction_pb.GetTransactionResponse.toObject, includeInstance),
    validated: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse;
  return proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new org_xrpl_rpc_v1_account_pb.AccountAddress;
      reader.readMessage(value,org_xrpl_rpc_v1_account_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedgerIndexMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedgerIndexMax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 5:
      var value = new proto.org.xrpl.rpc.v1.Marker;
      reader.readMessage(value,proto.org.xrpl.rpc.v1.Marker.deserializeBinaryFromReader);
      msg.setMarker(value);
      break;
    case 6:
      var value = new org_xrpl_rpc_v1_get_transaction_pb.GetTransactionResponse;
      reader.readMessage(value,org_xrpl_rpc_v1_get_transaction_pb.GetTransactionResponse.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      org_xrpl_rpc_v1_account_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getLedgerIndexMin();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLedgerIndexMax();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMarker();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.org.xrpl.rpc.v1.Marker.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      org_xrpl_rpc_v1_get_transaction_pb.GetTransactionResponse.serializeBinaryToWriter
    );
  }
  f = message.getValidated();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional AccountAddress account = 1;
 * @return {?proto.org.xrpl.rpc.v1.AccountAddress}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.getAccount = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, org_xrpl_rpc_v1_account_pb.AccountAddress, 1));
};


/** @param {?proto.org.xrpl.rpc.v1.AccountAddress|undefined} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 ledger_index_min = 2;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.getLedgerIndexMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.setLedgerIndexMin = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 ledger_index_max = 3;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.getLedgerIndexMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.setLedgerIndexMax = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 limit = 4;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Marker marker = 5;
 * @return {?proto.org.xrpl.rpc.v1.Marker}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.getMarker = function() {
  return /** @type{?proto.org.xrpl.rpc.v1.Marker} */ (
    jspb.Message.getWrapperField(this, proto.org.xrpl.rpc.v1.Marker, 5));
};


/** @param {?proto.org.xrpl.rpc.v1.Marker|undefined} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.setMarker = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.clearMarker = function() {
  this.setMarker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.hasMarker = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated GetTransactionResponse transactions = 6;
 * @return {!Array<!proto.org.xrpl.rpc.v1.GetTransactionResponse>}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.org.xrpl.rpc.v1.GetTransactionResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, org_xrpl_rpc_v1_get_transaction_pb.GetTransactionResponse, 6));
};


/** @param {!Array<!proto.org.xrpl.rpc.v1.GetTransactionResponse>} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.org.xrpl.rpc.v1.GetTransactionResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.xrpl.rpc.v1.GetTransactionResponse}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.org.xrpl.rpc.v1.GetTransactionResponse, opt_index);
};


proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * optional bool validated = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.getValidated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.prototype.setValidated = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.xrpl.rpc.v1.Marker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.xrpl.rpc.v1.Marker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.xrpl.rpc.v1.Marker.displayName = 'proto.org.xrpl.rpc.v1.Marker';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.xrpl.rpc.v1.Marker.prototype.toObject = function(opt_includeInstance) {
  return proto.org.xrpl.rpc.v1.Marker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.xrpl.rpc.v1.Marker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Marker.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountSequence: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.xrpl.rpc.v1.Marker}
 */
proto.org.xrpl.rpc.v1.Marker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.xrpl.rpc.v1.Marker;
  return proto.org.xrpl.rpc.v1.Marker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.xrpl.rpc.v1.Marker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.xrpl.rpc.v1.Marker}
 */
proto.org.xrpl.rpc.v1.Marker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedgerIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccountSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.xrpl.rpc.v1.Marker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.xrpl.rpc.v1.Marker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.xrpl.rpc.v1.Marker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.xrpl.rpc.v1.Marker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAccountSequence();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 ledger_index = 1;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.Marker.prototype.getLedgerIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.Marker.prototype.setLedgerIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 account_sequence = 2;
 * @return {number}
 */
proto.org.xrpl.rpc.v1.Marker.prototype.getAccountSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.org.xrpl.rpc.v1.Marker.prototype.setAccountSequence = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.org.xrpl.rpc.v1);
