/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var payment_pb = require('./payment_pb.js');
goog.object.extend(proto, payment_pb);
var xrp_amount_pb = require('./xrp_amount_pb.js');
goog.object.extend(proto, xrp_amount_pb);
goog.exportSymbol('proto.io.xpring.Transaction', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.xpring.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.xpring.Transaction.oneofGroups_);
};
goog.inherits(proto.io.xpring.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.xpring.Transaction.displayName = 'proto.io.xpring.Transaction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.xpring.Transaction.oneofGroups_ = [[4]];

/**
 * @enum {number}
 */
proto.io.xpring.Transaction.TransactionDataCase = {
  TRANSACTION_DATA_NOT_SET: 0,
  PAYMENT: 4
};

/**
 * @return {proto.io.xpring.Transaction.TransactionDataCase}
 */
proto.io.xpring.Transaction.prototype.getTransactionDataCase = function() {
  return /** @type {proto.io.xpring.Transaction.TransactionDataCase} */(jspb.Message.computeOneofCase(this, proto.io.xpring.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.xpring.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.io.xpring.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.xpring.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.xpring.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fee: (f = msg.getFee()) && xrp_amount_pb.XRPAmount.toObject(includeInstance, f),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
    payment: (f = msg.getPayment()) && payment_pb.Payment.toObject(includeInstance, f),
    signingPublicKeyHex: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lastLedgerSequence: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.xpring.Transaction}
 */
proto.io.xpring.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.xpring.Transaction;
  return proto.io.xpring.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.xpring.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.xpring.Transaction}
 */
proto.io.xpring.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = new xrp_amount_pb.XRPAmount;
      reader.readMessage(value,xrp_amount_pb.XRPAmount.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 4:
      var value = new payment_pb.Payment;
      reader.readMessage(value,payment_pb.Payment.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigningPublicKeyHex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.xpring.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.xpring.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.xpring.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.xpring.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      xrp_amount_pb.XRPAmount.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      payment_pb.Payment.serializeBinaryToWriter
    );
  }
  f = message.getSigningPublicKeyHex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLastLedgerSequence();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.io.xpring.Transaction.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.xpring.Transaction.prototype.setAccount = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional XRPAmount fee = 2;
 * @return {?proto.io.xpring.XRPAmount}
 */
proto.io.xpring.Transaction.prototype.getFee = function() {
  return /** @type{?proto.io.xpring.XRPAmount} */ (
    jspb.Message.getWrapperField(this, xrp_amount_pb.XRPAmount, 2));
};


/** @param {?proto.io.xpring.XRPAmount|undefined} value */
proto.io.xpring.Transaction.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.xpring.Transaction.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.xpring.Transaction.prototype.hasFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 sequence = 3;
 * @return {number}
 */
proto.io.xpring.Transaction.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.io.xpring.Transaction.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Payment payment = 4;
 * @return {?proto.io.xpring.Payment}
 */
proto.io.xpring.Transaction.prototype.getPayment = function() {
  return /** @type{?proto.io.xpring.Payment} */ (
    jspb.Message.getWrapperField(this, payment_pb.Payment, 4));
};


/** @param {?proto.io.xpring.Payment|undefined} value */
proto.io.xpring.Transaction.prototype.setPayment = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.io.xpring.Transaction.oneofGroups_[0], value);
};


proto.io.xpring.Transaction.prototype.clearPayment = function() {
  this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.xpring.Transaction.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signing_public_key_hex = 5;
 * @return {string}
 */
proto.io.xpring.Transaction.prototype.getSigningPublicKeyHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.io.xpring.Transaction.prototype.setSigningPublicKeyHex = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 last_ledger_sequence = 6;
 * @return {number}
 */
proto.io.xpring.Transaction.prototype.getLastLedgerSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.io.xpring.Transaction.prototype.setLastLedgerSequence = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, proto.io.xpring);
